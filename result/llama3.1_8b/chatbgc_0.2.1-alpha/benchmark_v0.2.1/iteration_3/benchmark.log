2024-08-15 12:27:22,466 - INFO - Using ChatBGC version: 0.2.1-alpha
2024-08-15 12:27:22,467 - INFO - Starting the Vanna application
2024-08-15 12:27:22,467 - INFO - Starting app with DuckDB path: /datadrive/chatBGC_benchmark/data/antismash_db.duckdb, model: llama3.1:8b, LLM type: ollama
2024-08-15 12:27:22,734 - INFO - HTTP Request: GET http://localhost:11434/api/tags "HTTP/1.1 200 OK"
2024-08-15 12:27:22,734 - INFO - Connecting to DuckDB at /datadrive/chatBGC_benchmark/data/antismash_db.duckdb
2024-08-15 12:27:23,584 - INFO - Loading questions from /datadrive/chatBGC_benchmark/test/question_sql_pair.json
2024-08-15 12:27:23,585 - INFO - Output directory set to benchmark_v0.2.1/iteration_3/llm_response_ollama__llama3.1_8b
2024-08-15 12:27:23,585 - INFO - Processing question 1: List all antiSMASH BGC categories and their descriptions.
2024-08-15 12:27:23,815 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1
True
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the bgc_categories table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name     | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------|:--------------|:------------|:-----------------|\n| 25 | antismash_db    | antismash      | bgc_categories | category      | VARCHAR     |                  |\n| 26 | antismash_db    | antismash      | bgc_categories | description   | VARCHAR     |                  |\n\nThe following columns are in the bgc_types table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 30 | antismash_db    | antismash      | bgc_types    | bgc_type_id   | INTEGER     |                  |\n| 31 | antismash_db    | antismash      | bgc_types    | term          | VARCHAR     |                  |\n| 32 | antismash_db    | antismash      | bgc_types    | description   | VARCHAR     |                  |\n| 33 | antismash_db    | antismash      | bgc_types    | category      | VARCHAR     |                  |\n\nThe following columns are in the as_domain_subtypes table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 23 | antismash_db    | antismash      | as_domain_subtypes | subtype       | VARCHAR     |                  |\n| 24 | antismash_db    | antismash      | as_domain_subtypes | description   | VARCHAR     |                  |\n\nThe following columns are in the bgc_rules table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 27 | antismash_db    | antismash      | bgc_rules    | bgc_rule_id   | INTEGER     |                  |\n| 28 | antismash_db    | antismash      | bgc_rules    | RULE          | VARCHAR     |                  |\n| 29 | antismash_db    | antismash      | bgc_rules    | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the rel_candidates_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name           | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:---------------------|:--------------|:------------|:-----------------|\n| 187 | antismash_db    | antismash      | rel_candidates_types | candidate_id  | INTEGER     |                  |\n| 188 | antismash_db    | antismash      | rel_candidates_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the monomers table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 128 | antismash_db    | antismash      | monomers     | monomer_id    | INTEGER     |                  |\n| 129 | antismash_db    | antismash      | monomers     | substrate_id  | INTEGER     |                  |\n| 130 | antismash_db    | antismash      | monomers     | name          | VARCHAR     |                  |\n| 131 | antismash_db    | antismash      | monomers     | description   | VARCHAR     |                  |\n\nThe following columns are in the gene_ontologies table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name      | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------|:--------------|:------------|:-----------------|\n| 107 | antismash_db    | antismash      | gene_ontologies | go_id         | INTEGER     |                  |\n| 108 | antismash_db    | antismash      | gene_ontologies | identifier    | VARCHAR     |                  |\n| 109 | antismash_db    | antismash      | gene_ontologies | description   | VARCHAR     |                  |\n\nThe following columns are in the cdss table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 48 | antismash_db    | antismash      | cdss         | cds_id              | INTEGER     |                  |\n| 49 | antismash_db    | antismash      | cdss         | functional_class_id | INTEGER     |                  |\n| 50 | antismash_db    | antismash      | cdss         | locus_tag           | VARCHAR     |                  |\n| 51 | antismash_db    | antismash      | cdss         | name                | VARCHAR     |                  |\n| 52 | antismash_db    | antismash      | cdss         | product             | VARCHAR     |                  |\n| 53 | antismash_db    | antismash      | cdss         | protein_id          | VARCHAR     |                  |\n| 54 | antismash_db    | antismash      | cdss         | TRANSLATION         | VARCHAR     |                  |\n| 55 | antismash_db    | antismash      | cdss         | LOCATION            | VARCHAR     |                  |\n| 56 | antismash_db    | antismash      | cdss         | region_id           | INTEGER     |                  |\n\nThe following columns are in the smcogs table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 227 | antismash_db    | antismash      | smcogs       | smcog_id            | INTEGER     |                  |\n| 228 | antismash_db    | antismash      | smcogs       | name                | VARCHAR     |                  |\n| 229 | antismash_db    | antismash      | smcogs       | description         | VARCHAR     |                  |\n| 230 | antismash_db    | antismash      | smcogs       | functional_class_id | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'List all antiSMASH BGC categories and their descriptions.'}, {'role': 'assistant', 'content': 'SELECT   * FROM   antismash.bgc_categories;'}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': 'Find all lanthipeptide BGC type regions.'}, {'role': 'assistant', 'content': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset.'}, {'role': 'assistant', 'content': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;'}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'What are the available antiSMASH domain subtypes and their descriptions?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.as_domain_subtypes;'}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'List all antiSMASH BGC categories and their descriptions. For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the bgc_categories table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name     | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------|:--------------|:------------|:-----------------|\n| 25 | antismash_db    | antismash      | bgc_categories | category      | VARCHAR     |                  |\n| 26 | antismash_db    | antismash      | bgc_categories | description   | VARCHAR     |                  |\n\nThe following columns are in the bgc_types table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 30 | antismash_db    | antismash      | bgc_types    | bgc_type_id   | INTEGER     |                  |\n| 31 | antismash_db    | antismash      | bgc_types    | term          | VARCHAR     |                  |\n| 32 | antismash_db    | antismash      | bgc_types    | description   | VARCHAR     |                  |\n| 33 | antismash_db    | antismash      | bgc_types    | category      | VARCHAR     |                  |\n\nThe following columns are in the as_domain_subtypes table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 23 | antismash_db    | antismash      | as_domain_subtypes | subtype       | VARCHAR     |                  |\n| 24 | antismash_db    | antismash      | as_domain_subtypes | description   | VARCHAR     |                  |\n\nThe following columns are in the bgc_rules table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 27 | antismash_db    | antismash      | bgc_rules    | bgc_rule_id   | INTEGER     |                  |\n| 28 | antismash_db    | antismash      | bgc_rules    | RULE          | VARCHAR     |                  |\n| 29 | antismash_db    | antismash      | bgc_rules    | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the rel_candidates_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name           | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:---------------------|:--------------|:------------|:-----------------|\n| 187 | antismash_db    | antismash      | rel_candidates_types | candidate_id  | INTEGER     |                  |\n| 188 | antismash_db    | antismash      | rel_candidates_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the monomers table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 128 | antismash_db    | antismash      | monomers     | monomer_id    | INTEGER     |                  |\n| 129 | antismash_db    | antismash      | monomers     | substrate_id  | INTEGER     |                  |\n| 130 | antismash_db    | antismash      | monomers     | name          | VARCHAR     |                  |\n| 131 | antismash_db    | antismash      | monomers     | description   | VARCHAR     |                  |\n\nThe following columns are in the gene_ontologies table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name      | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------|:--------------|:------------|:-----------------|\n| 107 | antismash_db    | antismash      | gene_ontologies | go_id         | INTEGER     |                  |\n| 108 | antismash_db    | antismash      | gene_ontologies | identifier    | VARCHAR     |                  |\n| 109 | antismash_db    | antismash      | gene_ontologies | description   | VARCHAR     |                  |\n\nThe following columns are in the cdss table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 48 | antismash_db    | antismash      | cdss         | cds_id              | INTEGER     |                  |\n| 49 | antismash_db    | antismash      | cdss         | functional_class_id | INTEGER     |                  |\n| 50 | antismash_db    | antismash      | cdss         | locus_tag           | VARCHAR     |                  |\n| 51 | antismash_db    | antismash      | cdss         | name                | VARCHAR     |                  |\n| 52 | antismash_db    | antismash      | cdss         | product             | VARCHAR     |                  |\n| 53 | antismash_db    | antismash      | cdss         | protein_id          | VARCHAR     |                  |\n| 54 | antismash_db    | antismash      | cdss         | TRANSLATION         | VARCHAR     |                  |\n| 55 | antismash_db    | antismash      | cdss         | LOCATION            | VARCHAR     |                  |\n| 56 | antismash_db    | antismash      | cdss         | region_id           | INTEGER     |                  |\n\nThe following columns are in the smcogs table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 227 | antismash_db    | antismash      | smcogs       | smcog_id            | INTEGER     |                  |\n| 228 | antismash_db    | antismash      | smcogs       | name                | VARCHAR     |                  |\n| 229 | antismash_db    | antismash      | smcogs       | description         | VARCHAR     |                  |\n| 230 | antismash_db    | antismash      | smcogs       | functional_class_id | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "List all antiSMASH BGC categories and their descriptions."}, {"role": "assistant", "content": "SELECT   * FROM   antismash.bgc_categories;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "Find all lanthipeptide BGC type regions."}, {"role": "assistant", "content": "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset."}, {"role": "assistant", "content": "SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "What are the available antiSMASH domain subtypes and their descriptions?"}, {"role": "assistant", "content": "SELECT * FROM antismash.as_domain_subtypes;"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "List all antiSMASH BGC categories and their descriptions. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:24,654 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:24,655 - ERROR - Failed to process question 1: List all antiSMASH BGC categories and their descriptions.. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:24,655 - INFO - ---DONE---
2024-08-15 12:27:24,655 - INFO - Processing question 3: List all regions with a best MIBiG hit description containing 'neoabyssomicin'.
2024-08-15 12:27:24,711 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:24.653286319Z', 'message': {'role': 'assistant', 'content': '```sql\nSELECT bgc_type_id, description\nFROM antismash.rel_candidates_types;\n```'}, 'done_reason': 'stop', 'done': True, 'total_duration': 806935454, 'load_duration': 23623393, 'prompt_eval_count': 1026, 'prompt_eval_duration': 405389000, 'eval_count': 21, 'eval_duration': 256036000}
LLM Response: ```sql
SELECT bgc_type_id, description
FROM antismash.rel_candidates_types;
```
Info: Output from LLM: ```sql
SELECT bgc_type_id, description
FROM antismash.rel_candidates_types;
``` 
Extracted SQL: SELECT bgc_type_id, description
FROM antismash.rel_candidates_types
SELECT bgc_type_id, description
FROM antismash.rel_candidates_types
Couldn't run sql:  Binder Error: Referenced column "description" not found in FROM clause!
Candidate bindings: "rel_candidates_types.candidate_id"
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the cluster_compare_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name           | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------------|:--------------------|:------------|:-----------------|\n| 66 | antismash_db    | antismash      | cluster_compare_hits | hit_id              | INTEGER     |                  |\n| 67 | antismash_db    | antismash      | cluster_compare_hits | region_id           | INTEGER     |                  |\n| 68 | antismash_db    | antismash      | cluster_compare_hits | protocluster_id     | INTEGER     |                  |\n| 69 | antismash_db    | antismash      | cluster_compare_hits | reference_accession | VARCHAR     |                  |\n| 70 | antismash_db    | antismash      | cluster_compare_hits | description         | VARCHAR     |                  |\n| 71 | antismash_db    | antismash      | cluster_compare_hits | score               | FLOAT       |                  |\n| 72 | antismash_db    | antismash      | cluster_compare_hits | identity_metric     | FLOAT       |                  |\n| 73 | antismash_db    | antismash      | cluster_compare_hits | order_metric        | FLOAT       |                  |\n| 74 | antismash_db    | antismash      | cluster_compare_hits | components_metric   | FLOAT       |                  |\n\nThe following columns are in the taxa table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 265 | antismash_db    | antismash      | taxa         | tax_id          | INTEGER     |                  |\n| 266 | antismash_db    | antismash      | taxa         | ncbi_taxid      | INTEGER     |                  |\n| 267 | antismash_db    | antismash      | taxa         | superkingdom    | VARCHAR     |                  |\n| 268 | antismash_db    | antismash      | taxa         | kingdom         | VARCHAR     |                  |\n| 269 | antismash_db    | antismash      | taxa         | phylum          | VARCHAR     |                  |\n| 270 | antismash_db    | antismash      | taxa         | CLASS           | VARCHAR     |                  |\n| 271 | antismash_db    | antismash      | taxa         | taxonomic_order | VARCHAR     |                  |\n| 272 | antismash_db    | antismash      | taxa         | family          | VARCHAR     |                  |\n| 273 | antismash_db    | antismash      | taxa         | genus           | VARCHAR     |                  |\n| 274 | antismash_db    | antismash      | taxa         | species         | VARCHAR     |                  |\n| 275 | antismash_db    | antismash      | taxa         | strain          | VARCHAR     |                  |\n| 276 | antismash_db    | antismash      | taxa         | name            | VARCHAR     |                  |\n\nThe following columns are in the clusterblast_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name        | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:------------------|:--------------------|:------------|:-----------------|\n| 59 | antismash_db    | antismash      | clusterblast_hits | clusterblast_hit_id | INTEGER     |                  |\n| 60 | antismash_db    | antismash      | clusterblast_hits | region_id           | INTEGER     |                  |\n| 61 | antismash_db    | antismash      | clusterblast_hits | rank                | INTEGER     |                  |\n| 62 | antismash_db    | antismash      | clusterblast_hits | acc                 | VARCHAR     |                  |\n| 63 | antismash_db    | antismash      | clusterblast_hits | description         | VARCHAR     |                  |\n| 64 | antismash_db    | antismash      | clusterblast_hits | similarity          | INTEGER     |                  |\n| 65 | antismash_db    | antismash      | clusterblast_hits | algorithm_id        | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the comparippson_mibig_references table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name                    | column_name           | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:------------------------------|:----------------------|:------------|:-----------------|\n| 84 | antismash_db    | antismash      | comparippson_mibig_references | comparippson_mibig_id | INTEGER     |                  |\n| 85 | antismash_db    | antismash      | comparippson_mibig_references | accession             | VARCHAR     |                  |\n| 86 | antismash_db    | antismash      | comparippson_mibig_references | name                  | VARCHAR     |                  |\n| 87 | antismash_db    | antismash      | comparippson_mibig_references | product               | VARCHAR     |                  |\n| 88 | antismash_db    | antismash      | comparippson_mibig_references | compound              | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': "List all regions with a best MIBiG hit description containing 'neoabyssomicin'."}, {'role': 'assistant', 'content': "SELECT * FROM antismash.regions  WHERE best_mibig_hit_description ILIKE '%neoabyssomicin%';"}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': 'Get me all region with knownclusterblast hits above 80 percent similarity.'}, {'role': 'assistant', 'content': 'SELECT best_mibig_hit_description, COUNT(*) as occurrence_count FROM antismash.regions WHERE best_mibig_hit_similarity > 80 GROUP BY best_mibig_hit_description ORDER BY occurrence_count DESC;'}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'Find all lanthipeptide BGC type regions.'}, {'role': 'assistant', 'content': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': "List all regions with a best MIBiG hit description containing 'neoabyssomicin'. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the cluster_compare_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name           | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------------|:--------------------|:------------|:-----------------|\n| 66 | antismash_db    | antismash      | cluster_compare_hits | hit_id              | INTEGER     |                  |\n| 67 | antismash_db    | antismash      | cluster_compare_hits | region_id           | INTEGER     |                  |\n| 68 | antismash_db    | antismash      | cluster_compare_hits | protocluster_id     | INTEGER     |                  |\n| 69 | antismash_db    | antismash      | cluster_compare_hits | reference_accession | VARCHAR     |                  |\n| 70 | antismash_db    | antismash      | cluster_compare_hits | description         | VARCHAR     |                  |\n| 71 | antismash_db    | antismash      | cluster_compare_hits | score               | FLOAT       |                  |\n| 72 | antismash_db    | antismash      | cluster_compare_hits | identity_metric     | FLOAT       |                  |\n| 73 | antismash_db    | antismash      | cluster_compare_hits | order_metric        | FLOAT       |                  |\n| 74 | antismash_db    | antismash      | cluster_compare_hits | components_metric   | FLOAT       |                  |\n\nThe following columns are in the taxa table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 265 | antismash_db    | antismash      | taxa         | tax_id          | INTEGER     |                  |\n| 266 | antismash_db    | antismash      | taxa         | ncbi_taxid      | INTEGER     |                  |\n| 267 | antismash_db    | antismash      | taxa         | superkingdom    | VARCHAR     |                  |\n| 268 | antismash_db    | antismash      | taxa         | kingdom         | VARCHAR     |                  |\n| 269 | antismash_db    | antismash      | taxa         | phylum          | VARCHAR     |                  |\n| 270 | antismash_db    | antismash      | taxa         | CLASS           | VARCHAR     |                  |\n| 271 | antismash_db    | antismash      | taxa         | taxonomic_order | VARCHAR     |                  |\n| 272 | antismash_db    | antismash      | taxa         | family          | VARCHAR     |                  |\n| 273 | antismash_db    | antismash      | taxa         | genus           | VARCHAR     |                  |\n| 274 | antismash_db    | antismash      | taxa         | species         | VARCHAR     |                  |\n| 275 | antismash_db    | antismash      | taxa         | strain          | VARCHAR     |                  |\n| 276 | antismash_db    | antismash      | taxa         | name            | VARCHAR     |                  |\n\nThe following columns are in the clusterblast_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name        | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:------------------|:--------------------|:------------|:-----------------|\n| 59 | antismash_db    | antismash      | clusterblast_hits | clusterblast_hit_id | INTEGER     |                  |\n| 60 | antismash_db    | antismash      | clusterblast_hits | region_id           | INTEGER     |                  |\n| 61 | antismash_db    | antismash      | clusterblast_hits | rank                | INTEGER     |                  |\n| 62 | antismash_db    | antismash      | clusterblast_hits | acc                 | VARCHAR     |                  |\n| 63 | antismash_db    | antismash      | clusterblast_hits | description         | VARCHAR     |                  |\n| 64 | antismash_db    | antismash      | clusterblast_hits | similarity          | INTEGER     |                  |\n| 65 | antismash_db    | antismash      | clusterblast_hits | algorithm_id        | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the comparippson_mibig_references table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name                    | column_name           | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:------------------------------|:----------------------|:------------|:-----------------|\n| 84 | antismash_db    | antismash      | comparippson_mibig_references | comparippson_mibig_id | INTEGER     |                  |\n| 85 | antismash_db    | antismash      | comparippson_mibig_references | accession             | VARCHAR     |                  |\n| 86 | antismash_db    | antismash      | comparippson_mibig_references | name                  | VARCHAR     |                  |\n| 87 | antismash_db    | antismash      | comparippson_mibig_references | product               | VARCHAR     |                  |\n| 88 | antismash_db    | antismash      | comparippson_mibig_references | compound              | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "List all regions with a best MIBiG hit description containing 'neoabyssomicin'."}, {"role": "assistant", "content": "SELECT * FROM antismash.regions  WHERE best_mibig_hit_description ILIKE '%neoabyssomicin%';"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "Get me all region with knownclusterblast hits above 80 percent similarity."}, {"role": "assistant", "content": "SELECT best_mibig_hit_description, COUNT(*) as occurrence_count FROM antismash.regions WHERE best_mibig_hit_similarity > 80 GROUP BY best_mibig_hit_description ORDER BY occurrence_count DESC;"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Find all lanthipeptide BGC type regions."}, {"role": "assistant", "content": "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "List all regions with a best MIBiG hit description containing 'neoabyssomicin'. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:26,888 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:27,285 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:27,286 - INFO - Question 3 processed successfully with 0 rows in the answer dataframe
2024-08-15 12:27:27,286 - INFO - Saving output to benchmark_v0.2.1/iteration_3/llm_response_ollama__llama3.1_8b/Q_03__ollama__llama3.1_8b__RAG_benchmark.csv
2024-08-15 12:27:27,288 - INFO - Saving output to benchmark_v0.2.1/iteration_3/llm_response_ollama__llama3.1_8b/Q_03__ollama__llama3.1_8b__RAG_benchmark.json
2024-08-15 12:27:27,288 - INFO - ---DONE---
2024-08-15 12:27:27,288 - INFO - Processing question 8: What are the different domain profiles available in the antiSMASH database?
2024-08-15 12:27:27,325 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:26.888141Z', 'message': {'role': 'assistant', 'content': "```sql\nSELECT DISTINCT region_id\nFROM antismash.clusterblast_hits\nWHERE acc IN (\n    SELECT acc \n    FROM antismash.comparippson_mibig_references\n    WHERE description LIKE '%neoabyssomicin%'\n);\n```\n\nPlease note that this SQL query will list the regions for which a MIBiG hit was found, but it does not guarantee that 'neoabyssomicin' is present in any of these hits directly. It only guarantees that one of the MIBiG references associated with this region contains 'neoabyssomicin' in its description."}, 'done_reason': 'stop', 'done': True, 'total_duration': 2154788277, 'load_duration': 24030381, 'prompt_eval_count': 1026, 'prompt_eval_duration': 414360000, 'eval_count': 124, 'eval_duration': 1597973000}
LLM Response: ```sql
SELECT DISTINCT region_id
FROM antismash.clusterblast_hits
WHERE acc IN (
    SELECT acc 
    FROM antismash.comparippson_mibig_references
    WHERE description LIKE '%neoabyssomicin%'
);
```

Please note that this SQL query will list the regions for which a MIBiG hit was found, but it does not guarantee that 'neoabyssomicin' is present in any of these hits directly. It only guarantees that one of the MIBiG references associated with this region contains 'neoabyssomicin' in its description.
Info: Output from LLM: ```sql
SELECT DISTINCT region_id
FROM antismash.clusterblast_hits
WHERE acc IN (
    SELECT acc 
    FROM antismash.comparippson_mibig_references
    WHERE description LIKE '%neoabyssomicin%'
);
```

Please note that this SQL query will list the regions for which a MIBiG hit was found, but it does not guarantee that 'neoabyssomicin' is present in any of these hits directly. It only guarantees that one of the MIBiG references associated with this region contains 'neoabyssomicin' in its description. 
Extracted SQL: SELECT DISTINCT region_id
FROM antismash.clusterblast_hits
WHERE acc IN (
    SELECT acc 
    FROM antismash.comparippson_mibig_references
    WHERE description LIKE '%neoabyssomicin%'
)
SELECT DISTINCT region_id
FROM antismash.clusterblast_hits
WHERE acc IN (
    SELECT acc 
    FROM antismash.comparippson_mibig_references
    WHERE description LIKE '%neoabyssomicin%'
)
Empty DataFrame
Columns: [region_id]
Index: []
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a helpful data assistant. The user asked the question: 'List all regions with a best MIBiG hit description containing 'neoabyssomicin'.'\n\nThe following is a pandas DataFrame with the results of the query: \n| region_id   |\n|-------------|\n\n"}, {"role": "user", "content": "Briefly summarize the data based on the question that was asked. Do not respond with any additional explanation beyond the summary."}]
Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:27.285111846Z', 'message': {'role': 'assistant', 'content': 'No regions match the criteria.'}, 'done_reason': 'stop', 'done': True, 'total_duration': 334367085, 'load_duration': 23406203, 'prompt_eval_count': 96, 'prompt_eval_duration': 102716000, 'eval_count': 7, 'eval_duration': 75243000}
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\n# AntiSMASH DuckDB Database Documentation\nThis documentation describes the table in the duckDB antiSMASH database.\nIt covers the structure and purpose of each table and column in the database schema, making it easier to understand and use the database for querying and analysis.\n\n## Table: antismash.as_domain_profiles\nThis table stores information about domain profiles.\nA functional secondary metabolite domain profile predicted by antiSMASH.\n\n- **as_domain_profile_id**: Identifier for the domain profile.\n- **name**: Name of the domain profile.\n- **description**: Description of the domain profile.\n- **DATABASE**: Database associated with the domain profile.\n- **TYPE**: Type of the domain profile.\n\n## Table: antismash.as_domain_subtypes\nThis table stores information about domain subtypes.\nPossible subtypes of domains predicted by antiSMASH, e.g. TransAT-KS.\n\n- **subtype**: Identifier for the domain subtype.\n- **description**: Description of the domain subtype.\n\n## Table: antismash.bgc_categories\nThis table stores information about BGC categories.\nBiosynthetic gene cluster categories according to MIBiG spec.\n\n- **category**: Identifier for the BGC category. Values could be pks, nrps, ripp, terpene, saccharide, alkaloid, or other.\n- **description**: Description of the BGC category. The following are the categories and its description: \'pks\' is \'Polyketide\', \'nrps\' is \'Nonribosomal peptide\', \'ripp\' is \'Ribosomally synthesized and post-translationally modified peptide\', \'terpene\' is \'Terpene\', \'saccharide\' is\'Saccharide\', \'alkaloid\' is \'Alkaloid\', and \'other\' is \'Other\'.\n\n## Table: antismash.candidate_types\nThis table stores information about candidate types.\nCandidate cluster types as used by antiSMASH.\n\n- **candidate_type_id**: Identifier for the candidate type.\n- **description**: Description of the candidate type. Can be \'chemical hybrid\', \'interleaved\', \'neighbouring\', or \'single\'.\n\n## Table: antismash.clusterblast_algorithms\nThis table stores information about clusterblast algorithms.\nAvailable *ClusterBlast algorithms.\n\n- **algorithm_id**: Identifier for the algorithm.\n- **name**: Name of the algorithm. Value could be \'clusterblast\',\'knownclusterblast\', or \'subclusterblast\'.\n\n\n## Table: antismash.comparippson_mibig_references\nThis table stores references to MIBIG entries used in comparative analysis.\n\n- **comparippson_mibig_id**: Identifier for the MIBIG reference.\n- **accession**: Accession number of the MIBIG entry.\n- **name**: Name of the MIBIG entry.\n- **product**: Product associated with the MIBIG entry.\n- **compound**: Compound associated with the MIBIG entry.\n\n## Table: antismash.filenames\nThis table stores information about filenames associated with assemblies.\nTracking a number of interesting filenames for an assembly id.\n\n- **assembly_id**: Identifier for the assembly.\n- **base_filename**: Base filename for the assembly.\n\n## Table: antismash.functional_classes\nThis table stores information about functional classes.\nAn index of possible functional classes.\n\n- **functional_class_id**: Identifier for the functional class.\n- **name**: Name of the functional class. Values for basic functional classes are \'biosynthetic\', \'regulator\', \'transporter\', or \'other\'. Advanced classes are \'bgc_seed\' and \'biosynthetic_smcog\', which are the child of parent class \'biosynthetic\'.\n- **parent_id**: Identifier for the parent functional class, if applicable.\n\n## Table: antismash.gene_ontologies\nThis table stores information about gene ontologies.\n\n- **go_id**: Identifier for the gene ontology.\n- **identifier**: Unique identifier for the gene ontology.\n- **description**: Description of the gene ontology.\n\n## Table: antismash.module_domain_functions\nThis table stores information about functions associated with module domains in table antismash.modules.\n\n- **function_id**: Identifier for the function.\n- **FUNCTION**: Description of the function. Values could be \'starter\',\'loader\', \'carrier_protein\', \'modification\', \'finalisation\', or \'other\'.\n\n## Table: antismash.pfams\nThis table stores information about Pfam entries.\npfam domain metadata.\n\n- **pfam_id**: Identifier for the Pfam entry.\n- **name**: Name of the Pfam entry.\n- **description**: Description of the Pfam entry.\n- **trusted_cutoff**: Trusted cutoff value for the Pfam entry.\n\n## Table: antismash.profiles\nThis table stores information about HMM profiles.\nHMM profiles used during cluster detection.\n\n- **name**: Name of the profile.\n- **description**: Description of the profile.\n- **cutoff**: Cutoff value for the profile.\n- **filename**: Filename associated with the profile.\n\n## Table: antismash.regulators\nThis table stores information about regulators, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **regulator_id**: Identifier for the regulator.\n- **name**: Name of the regulator.\n- **description**: Description of the regulator.\n\n## Table: antismash.regulator_confidence\nThis table stores information about regulator confidence levels, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **confidence_id**: Identifier for the confidence level.\n- **name**: Name of the confidence level. Can be \'weak\', \'medium\', or \'strong\'.\n- **strength**: Strength of the confidence level.\n\n## Table: antismash.resfams\nThis table stores information about Resfam entries.\n\n- **resfam_id**: Identifier for the Resfam entry.\n- **accession**: Accession number of the Resfam entry.\n- **name**: Name of the Resfam entry.\n- **description**: Description of the Resfam entry.\n\n## Table: antismash.sampling_sites\nThis table stores information about sampling sites.\nA site where a biological sample was taken.\n\n- **site_id**: Identifier for the sampling site.\n\n## Table: antismash.substrates\nThis table stores information about substrates.\n\n- **substrate_id**: Identifier for the substrate.\n- **name**: Name of the substrate.\n- **description**: Description of the substrate.\n\n## Table: antismash.t2pks_products\nThis table stores information about T2PKS products.\n\n- **product_type**: Type of the product.\n- **product_function**: Function of the product.\n\n## Table: antismash.t2pks_profiles\nThis table stores information about T2PKS profiles.\n\n- **profile_id**: Identifier for the profile.\n- **name**: Name of the profile.\n- **description**: Description of the profile.\n\n## Table: antismash.taxa\nThis table stores NCBI taxonomic classification information.\n\n- **tax_id**: Identifier for the taxonomic entry.\n- **ncbi_taxid**: NCBI taxonomic identifier.\n- **superkingdom**: Superkingdom classification.\n- **kingdom**: Kingdom classification.\n- **phylum**: Phylum classification.\n- **class**: Class classification.\n- **taxonomic_order**: Order classification.\n- **family**: Family classification.\n- **genus**: Genus classification.\n- **species**: Species classification.\n- **strain**: Strain classification.\n- **name**: Name of the taxonomic entry.\n\n## Table: antismash.tigrfams\nThis table stores information about TIGRFAM entries.\ntigrfam domain metadata.\n\n- **tigrfam_id**: Identifier for the TIGRFAM entry.\n- **name**: Name of the TIGRFAM entry.\n- **description**: Description of the TIGRFAM entry.\n- **trusted_cutoff**: Trusted cutoff value for the TIGRFAM entry.\n\n## Table: antismash.bgc_types\nThis table stores information about BGC types.\nBiosynthetic gene cluster types.\n\n- **bgc_type_id**: Identifier for the BGC type.\n- **term**: Term associated with the BGC type.\n- **description**: Description of the BGC type.\n- **category**: Category associated with the BGC type.\n\n## Table: antismash.monomers\nThis table stores information about monomers.\n\n- **monomer_id**: Identifier for the monomer.\n- **substrate_id**: Identifier for the substrate associated with the monomer.\n- **name**: Name of the monomer.\n- **description**: Description of the monomer.\n\n## Table: antismash.rel_as_domain_to_subtype\nThis table stores relationships between domain subtypes and domains.\nRelationships between a specific aSDomain and subtypes.\n\n- **as_domain_id**: Identifier for the domain.\n- **subtype**: Identifier for the subtype.\n\n## Table: antismash.samples\nThis table stores information about samples.\nA biological sample.\n\n- **sample_id**: Identifier for the sample.\n- **habitat**: Habitat where the sample was collected.\n- **TIME**: Time when the sample was collected.\n- **site_id**: Identifier for the sampling site.\n\n## Table: antismash.smcogs\nThis table stores information about SMCOG entries.\nSecondary Metabolite specific Clusters of Orthologous Groups (smCoGs).\n\n- **smcog_id**: Identifier for the SMCOG entry.\n- **name**: Name of the SMCOG entry.\n- **description**: Description of the SMCOG entry.\n- **functional_class_id**: Identifier for the functional class associated with the SMCOG entry.\n\n## Table: antismash.bgc_rules\nThis table stores information about BGC rules.\nThe detection rule used for a specific BGC type.\n\n- **bgc_rule_id**: Identifier for the BGC rule.\n- **RULE**: Description of the rule.\n- **bgc_type_id**: Identifier for the BGC type associated with the rule.\n\n## Table: antismash.isolates\nThis table stores information about isolates.\nA single biological isolate, sample or strain.\n\n- **isolate_id**: Identifier for the isolate.\n- **sample_id**: Identifier for the sample associated with the isolate.\n\n## Table: antismash.genomes\nThis table stores information about genomes.\nInformation on a genome.\n\n- **genome_id**: Identifier for the genome.\n- **tax_id**: Identifier for the taxonomic entry associated with the genome.\n- **bio_project**: BioProject associated with the genome.\n- **bio_sample**: BioSample associated with the genome.\n- **isolate_id**: Identifier for the isolate associated with the genome.\n- **assembly_id**: Identifier for the assembly associated with the genome.\n\n## Table: antismash.dna_sequences\nThis table stores information about DNA sequences.\n\n- **dna**: DNA sequence.\n- **md5**: MD5 checksum of the DNA sequence.\n- **accession**: Accession number for the DNA sequence.\n- **definition**: Definition of the DNA sequence.\n- **contig_type**: Type of the contig.\n- **chromosome_type**: Type of the chromosome.\n- **record_number**: Record number for the DNA sequence.\n- **VERSION**: Version of the DNA sequence.\n- **genome_id**: Identifier for the genome associated with the DNA sequence.\n\n## Table: antismash.regions\nThis table stores information about regions in the DNA sequences containing Biosynthetic Gene Clusters as predicted by antiSMASH. People commonly refers to region when mentioning a BGC.\nA region of interest as predicted by antiSMASH.\n\n- **region_id**: Identifier for the region.\n- **accession**: Accession number for the DNA sequence associated with the region.\n- **region_number**: Number of the region.\n- **LOCATION**: Location of the region.\n- **start_pos**: Start position of the region.\n- **end_pos**: End position of the region.\n- **contig_edge**: Indicates if the region is at the contig edge.\n- **best_mibig_hit_acc**: Best MIBIG hit accession number.\n- **best_mibig_hit_description**: Best MIBIG hit description.\n- **best_mibig_hit_similarity**: Best MIBIG hit similarity.\n\n## Table: antismash.rel_regions_types\nThis table stores relationships between regions and BGC types.\n\n- **region_id**: Identifier for the region.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.tta_codons\nThis table stores information about TTA codons. This codon are quite rare in GC-rich organism such as Streptomyces. While genes involved in primary metabolism almost exclusively use CTC codons to code for Leu, key genes in secondary metabolism and cell differentiation often contain TTA codons.\nA TTA codon record.\n\n- **tta_codon_id**: Identifier for the TTA codon.\n- **seq_id**: Identifier for the DNA sequence.\n- **LOCATION**: Location of the TTA codon in the DNA sequence.\n\n## Table: antismash.binding_sites\nThis table stores information about binding sites of regulators, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **binding_site_id**: Identifier for the binding site.\n- **regulator_id**: Identifier for the regulator.\n- **region_id**: Identifier for the region.\n- **score**: Score of the binding site.\n- **START**: Start position of the binding site.\n- **confidence_id**: Identifier for the confidence level.\n\n## Table: antismash.candidates\nThis table stores information about candidates cluster.\nA candidate cluster as predicted by antiSMASH.\n\n- **candidate_id**: Identifier for the candidate.\n- **region_id**: Identifier for the region.\n- **LOCATION**: Location of the candidate in the region.\n- **candidate_type_id**: Identifier for the candidate type.\n- **smiles**: SMILES notation for the candidate.\n- **polymer**: Polymer information for the candidate.\n\n## Table: antismash.cdss\nThis table stores information about coding sequences (CDSs).\nA CDS record.\n\n- **cds_id**: Identifier for the CDS.\n- **functional_class_id**: Identifier for the functional class associated with the CDS.\n- **locus_tag**: Locus tag of the CDS.\n- **name**: Name of the CDS.\n- **product**: Product encoded by the CDS.\n- **protein_id**: Protein identifier for the CDS.\n- **TRANSLATION**: Translation of the CDS.\n- **LOCATION**: Location of the CDS in the region.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.clusterblast_hits\nThis table stores information about clusterblast hits.\nClusterBlast hit storage, also for Sub- and KnownClusterblast.\n\n- **clusterblast_hit_id**: Identifier for the clusterblast hit.\n- **region_id**: Identifier for the region.\n- **rank**: Rank of the clusterblast hit.\n- **acc**: Accession number of the clusterblast hit.\n- **description**: Description of the clusterblast hit.\n- **similarity**: Similarity of the clusterblast hit.\n- **algorithm_id**: Identifier for the algorithm used.\n\n## Table: antismash.comparippson_asdb_references\nThis table stores references to ASDB entries used in comparative analysis.\n\n- **comparippson_asdb_id**: Identifier for the ASDB reference.\n- **cds_id**: Identifier for the CDS.\n- **product**: Product associated with the ASDB reference.\n\n## Table: antismash.comparippson_hits\nThis table stores information about comparippson hits.\nCompaRiPPson hits storage for both MIBiG and aS-DB.\n\n- **comparippson_hit_id**: Identifier for the comparippson hit.\n- **cds_id**: Identifier for the CDS.\n- **similarity**: Similarity of the comparippson hit.\n- **region_id**: Identifier for the region.\n- **comparippson_mibig_id**: Identifier for the MIBIG reference.\n- **comparippson_asdb_id**: Identifier for the ASDB reference.\n\n## Table: antismash.genes\nThis table stores information about genes.\nA gene record.\n\n- **gene_id**: Identifier for the gene.\n- **locus_tag**: Locus tag of the gene.\n- **LOCATION**: Location of the gene in the region.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.modules\nThis table stores information about modules.\nAn NRPS/PKS module with multiple child domains, the loaded substrate and resulting modified monomer.\n\n- **module_id**: Identifier for the module.\n- **LOCATION**: Location of the module.\n- **TYPE**: Type of the module.\n- **trans_at**: Indicates if the module is trans-AT.\n- **complete**: Indicates if the module is complete.\n- **iterative**: Indicates if the module is iterative.\n- **multi_gene**: Indicates if the module is multi-gene.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.pfam_domains\nThis table stores information about Pfam domains.\nA PFAM domain prediction.\n\n- **pfam_domain_id**: Identifier for the Pfam domain.\n- **DATABASE**: Database associated with the Pfam domain.\n- **detection**: Detection method for the Pfam domain.\n- **score**: Score of the Pfam domain.\n- **evalue**: E-value of the Pfam domain.\n- **TRANSLATION**: Translation of the Pfam domain.\n- **pfam_id**: Identifier for the Pfam entry.\n- **LOCATION**: Location of the Pfam domain.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.pfam_go_entries\nThis table stores relationships between Pfam domains and gene ontologies.\n\n- **pfam_domain_id**: Identifier for the Pfam domain.\n- **go_id**: Identifier for the gene ontology.\n\n## Table: antismash.profile_hits\nThis table stores information about profile hits.\n\n- **profile_hit_id**: Identifier for the profile hit.\n- **cds_id**: Identifier for the CDS.\n- **name**: Name of the profile.\n- **evalue**: E-value of the profile hit.\n- **bitscore**: Bit score of the profile hit.\n- **seeds**: Number of seeds for the profile hit.\n\n## Table: antismash.protoclusters\nThis table stores information about protoclusters.\nA protocluster as predicted by antiSMASH.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **region_id**: Identifier for the region.\n- **LOCATION**: Location of the protocluster.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.rel_candidates_modules\nThis table stores relationships between candidates and modules.\nMany to many relation for compounds to modules.\n\n- **candidate_id**: Identifier for the candidate.\n- **module_id**: Identifier for the module.\n\n## Table: antismash.rel_candidates_protoclusters\nThis table stores relationships between candidates and protoclusters.\nMany to many relation for candidates to protoclusters\n\n- **candidate_id**: Identifier for the candidate.\n- **protocluster_id**: Identifier for the protocluster.\n\n## Table: antismash.rel_candidates_types\nThis table stores relationships between candidates and BGC types.\nMany to many relation for candidates and bgc_types.\n\n- **candidate_id**: Identifier for the candidate.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.rel_cds_candidates\nThis table stores relationships between CDSs and candidates.\nMany to many relation for CDSs to candidates.\n\n- **candidate_id**: Identifier for the candidate.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.rel_cds_protoclusters\nThis table stores relationships between CDSs and protoclusters.\nMany to many relation for CDSs to protoclusters.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.rel_modules_monomers\nThis table stores relationships between modules and monomers.\nMany to many relation for modules to substrates and monomers.\n\n- **module_id**: Identifier for the module.\n- **substrate**: Identifier for the substrate.\n- **monomer**: Identifier for the monomer.\n\n## Table: antismash.resfam_domains\nThis table stores information about Resfam domains.\n\n- **resfam_domain_id**: Identifier for the Resfam domain.\n- **score**: Score of the Resfam domain.\n- **evalue**: E-value of the Resfam domain.\n- **resfam_id**: Identifier for the Resfam entry.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.ripps\nThis table stores information about RiPPs (Ribosomally synthesized and Post-translationally modified Peptides).\nA (predicted) ribosomally preduced peptide compound.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **peptide_sequence**: Peptide sequence of the RiPP.\n- **molecular_weight**: Molecular weight of the RiPP.\n- **monoisotopic_mass**: Monoisotopic mass of the RiPP.\n- **alternative_weights**: Alternative weights of the RiPP.\n- **bridges**: Number of bridges in the RiPP.\n- **CLASS**: Class of the RiPP.\n- **subclass**: Subclass of the RiPP.\n- **score**: Score of the RiPP.\n- **locus_tag**: Locus tag associated with the RiPP.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.smcog_hits\nThis table stores information about SMCOG hits.\nMetadata about an smCoG hit.\n\n- **smcog_id**: Identifier for the SMCOG entry.\n- **cds_id**: Identifier for the CDS.\n- **score**: Score of the SMCOG hit.\n- **evalue**: E-value of the SMCOG hit.\n- **image_path**: Path to the image associated with the SMCOG hit.\n\n## Table: antismash.t2pks\nThis table stores information about T2PKS (Type II Polyketide Synthases).\nPredicted compound details for a Type II PKS.\n\n- **t2pks_id**: Identifier for the T2PKS.\n- **protocluster_id**: Identifier for the protocluster.\n\n## Table: antismash.t2pks_cds_domain\nThis table stores information about T2PKS CDS domains.\n\n- **domain_id**: Identifier for the domain.\n- **t2pks_id**: Identifier for the T2PKS.\n- **cds_id**: Identifier for the CDS.\n- **profile_id**: Identifier for the profile.\n- **protein_type**: Type of the protein.\n- **protein_function**: Function of the protein.\n- **evalue**: E-value of the domain.\n- **bitscore**: Bit score of the domain.\n\n## Table: antismash.t2pks_product_classes\nThis table stores relationships between T2PKS and product classes.\n\n- **t2pks_id**: Identifier for the T2PKS.\n- **product_class**: Product class associated with the T2PKS.\n\n## Table: antismash.t2pks_starters\nThis table stores information about T2PKS starters.\nA Type II PKS-specific starter domain.\n\n- **domain_id**: Identifier for the domain.\n- **t2pks_id**: Identifier for the T2PKS.\n- **name**: Name of the starter.\n- **evalue**: E-value of the starter.\n- **bitscore**: Bit score of the starter.\n\n## Table: antismash.t2pks_starter_elongation\nThis table stores information about T2PKS starter elongation combinations.\n\n- **combo_id**: Identifier for the combination.\n- **domain_id**: Identifier for the domain.\n- **elongation**: Elongation value.\n- **weight**: Weight of the elongation combination.\n\n## Table: antismash.tigrfam_domains\nThis table stores information about TIGRFAM domains.\nA TIGRFAM domain prediction.\n\n- **tigrfam_domain_id**: Identifier for the TIGRFAM domain.\n- **DATABASE**: Database associated with the TIGRFAM domain.\n- **detection**: Detection method for the TIGRFAM domain.\n- **score**: Score of the TIGRFAM domain.\n- **evalue**: E-value of the TIGRFAM domain.\n- **TRANSLATION**: Translation of the TIGRFAM domain.\n- **tigrfam_id**: Identifier for the TIGRFAM entry.\n- **LOCATION**: Location of the TIGRFAM domain.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.as_domains\nThis table stores information about domains.\nA functional domain on a gene as predicted by antiSMASH.\n\n- **as_domain_id**: Identifier for the domain.\n- **detection**: Detection method for the domain.\n- **score**: Score of the domain.\n- **evalue**: E-value of the domain.\n- **TRANSLATION**: Translation of the domain.\n- **pks_signature**: PKS signature of the domain.\n- **minowa**: Minowa score of the domain. This score predicts the specificity of adenylation domains in nonribosomal peptide synthetases (NRPS).\n- **nrps_predictor**: NRPS predictor score.\n- **stachelhaus**: Stachelhaus score. This score predicts the specificity of adenylation domains in nonribosomal peptide synthetases (NRPS).\n- **consensus**: Consensus sequence of the domain.\n- **kr_activity**: Indicates if the domain has (keto reductase) KR activity.\n- **kr_stereochemistry**: Stereochemistry of the (keto reductase) KR activity.\n- **as_domain_profile_id**: Identifier for the domain profile.\n- **LOCATION**: Location of the domain.\n- **cds_id**: Identifier for the CDS.\n- **module_id**: Identifier for the module.\n- **function_id**: Identifier for the function.\n- **follows**: Indicates if the domain follows another domain.\n\n## Table: antismash.cluster_compare_hits\nThis table stores information about cluster comparison hits.\nClusterCompare hit storage.\n\n- **hit_id**: Identifier for the cluster comparison hit.\n- **region_id**: Identifier for the region.\n- **protocluster_id**: Identifier for the protocluster.\n- **reference_accession**: Reference accession number.\n- **description**: Description of the cluster comparison hit.\n- **score**: Score of the cluster comparison hit.\n- **identity_metric**: Identity metric of the cluster comparison hit.\n- **order_metric**: Order metric of the cluster comparison hit.\n- **components_metric**: Components metric of the cluster comparison hit.\n\n## Table: antismash.rel_as_domains_substrates\nThis table stores relationships between AS domains and substrates.\nMany to many relation for as_domains to substrate.\n\n- **as_domain_id**: Identifier for the AS domain.\n- **substrate_id**: Identifier for the substrate.\n- **position_in_domain**: Position of the substrate in the domain.\n\n## Table: antismash.sequence_gc_content\nThis view stores GC content information for sequences.\n\n- **accession**: Accession number for the DNA sequence.\n- **gc_content**: GC content percentage of the DNA sequence.\n\n## Table: antismash.sequence_lengths\nThis view stores sequence length information.\n\n- **accession**: Accession number for the DNA sequence.\n- **seq_length**: Length of the DNA sequence.\n\n\nThe following columns are in the as_domains table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name          | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:---------------------|:------------|:-----------------|\n|  0 | antismash_db    | antismash      | as_domains   | as_domain_id         | INTEGER     |                  |\n|  1 | antismash_db    | antismash      | as_domains   | detection            | VARCHAR     |                  |\n|  2 | antismash_db    | antismash      | as_domains   | score                | DOUBLE      |                  |\n|  3 | antismash_db    | antismash      | as_domains   | evalue               | DOUBLE      |                  |\n|  4 | antismash_db    | antismash      | as_domains   | TRANSLATION          | VARCHAR     |                  |\n|  5 | antismash_db    | antismash      | as_domains   | pks_signature        | VARCHAR     |                  |\n|  6 | antismash_db    | antismash      | as_domains   | minowa               | VARCHAR     |                  |\n|  7 | antismash_db    | antismash      | as_domains   | nrps_predictor       | VARCHAR     |                  |\n|  8 | antismash_db    | antismash      | as_domains   | stachelhaus          | VARCHAR     |                  |\n|  9 | antismash_db    | antismash      | as_domains   | consensus            | VARCHAR     |                  |\n| 10 | antismash_db    | antismash      | as_domains   | kr_activity          | BOOLEAN     |                  |\n| 11 | antismash_db    | antismash      | as_domains   | kr_stereochemistry   | VARCHAR     |                  |\n| 12 | antismash_db    | antismash      | as_domains   | as_domain_profile_id | INTEGER     |                  |\n| 13 | antismash_db    | antismash      | as_domains   | LOCATION             | VARCHAR     |                  |\n| 14 | antismash_db    | antismash      | as_domains   | cds_id               | INTEGER     |                  |\n| 15 | antismash_db    | antismash      | as_domains   | module_id            | INTEGER     |                  |\n| 16 | antismash_db    | antismash      | as_domains   | function_id          | INTEGER     |                  |\n| 17 | antismash_db    | antismash      | as_domains   | follows              | INTEGER     |                  |\n\nThe following columns are in the pfam_domains table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name    | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------|:------------|:-----------------|\n| 137 | antismash_db    | antismash      | pfam_domains | pfam_domain_id | INTEGER     |                  |\n| 138 | antismash_db    | antismash      | pfam_domains | DATABASE       | VARCHAR     |                  |\n| 139 | antismash_db    | antismash      | pfam_domains | detection      | VARCHAR     |                  |\n| 140 | antismash_db    | antismash      | pfam_domains | score          | DOUBLE      |                  |\n| 141 | antismash_db    | antismash      | pfam_domains | evalue         | DOUBLE      |                  |\n| 142 | antismash_db    | antismash      | pfam_domains | TRANSLATION    | VARCHAR     |                  |\n| 143 | antismash_db    | antismash      | pfam_domains | pfam_id        | VARCHAR     |                  |\n| 144 | antismash_db    | antismash      | pfam_domains | LOCATION       | VARCHAR     |                  |\n| 145 | antismash_db    | antismash      | pfam_domains | cds_id         | INTEGER     |                  |\n\nThe following columns are in the as_domain_profiles table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name          | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:---------------------|:------------|:-----------------|\n| 18 | antismash_db    | antismash      | as_domain_profiles | as_domain_profile_id | INTEGER     |                  |\n| 19 | antismash_db    | antismash      | as_domain_profiles | name                 | VARCHAR     |                  |\n| 20 | antismash_db    | antismash      | as_domain_profiles | description          | VARCHAR     |                  |\n| 21 | antismash_db    | antismash      | as_domain_profiles | DATABASE             | VARCHAR     |                  |\n| 22 | antismash_db    | antismash      | as_domain_profiles | TYPE                 | VARCHAR     |                  |\n\nThe following columns are in the as_domain_subtypes table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 23 | antismash_db    | antismash      | as_domain_subtypes | subtype       | VARCHAR     |                  |\n| 24 | antismash_db    | antismash      | as_domain_subtypes | description   | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'What are the different domain profiles available in the antiSMASH database?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.as_domain_profiles;'}, {'role': 'user', 'content': 'What are the available antiSMASH domain subtypes and their descriptions?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.as_domain_subtypes;'}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Which domains are linked to a particular substrate?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.rel_as_domains_substrates WHERE substrate_id = 1;'}, {'role': 'user', 'content': 'What kind of functional classes are in the antiSMASH database?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.functional_classes;'}, {'role': 'user', 'content': 'What tigrfam domains are related to a specific CDS?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.tigrfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset.'}, {'role': 'assistant', 'content': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;'}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'What binding sites are linked to a specific regulator and their details?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.binding_sites WHERE regulator_id = 1;'}, {'role': 'user', 'content': 'What profiles hit a specific CDS and what are their details?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.profile_hits WHERE cds_id = 1;'}, {'role': 'user', 'content': 'What are the different domain profiles available in the antiSMASH database? For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\n# AntiSMASH DuckDB Database Documentation\nThis documentation describes the table in the duckDB antiSMASH database.\nIt covers the structure and purpose of each table and column in the database schema, making it easier to understand and use the database for querying and analysis.\n\n## Table: antismash.as_domain_profiles\nThis table stores information about domain profiles.\nA functional secondary metabolite domain profile predicted by antiSMASH.\n\n- **as_domain_profile_id**: Identifier for the domain profile.\n- **name**: Name of the domain profile.\n- **description**: Description of the domain profile.\n- **DATABASE**: Database associated with the domain profile.\n- **TYPE**: Type of the domain profile.\n\n## Table: antismash.as_domain_subtypes\nThis table stores information about domain subtypes.\nPossible subtypes of domains predicted by antiSMASH, e.g. TransAT-KS.\n\n- **subtype**: Identifier for the domain subtype.\n- **description**: Description of the domain subtype.\n\n## Table: antismash.bgc_categories\nThis table stores information about BGC categories.\nBiosynthetic gene cluster categories according to MIBiG spec.\n\n- **category**: Identifier for the BGC category. Values could be pks, nrps, ripp, terpene, saccharide, alkaloid, or other.\n- **description**: Description of the BGC category. The following are the categories and its description: 'pks' is 'Polyketide', 'nrps' is 'Nonribosomal peptide', 'ripp' is 'Ribosomally synthesized and post-translationally modified peptide', 'terpene' is 'Terpene', 'saccharide' is'Saccharide', 'alkaloid' is 'Alkaloid', and 'other' is 'Other'.\n\n## Table: antismash.candidate_types\nThis table stores information about candidate types.\nCandidate cluster types as used by antiSMASH.\n\n- **candidate_type_id**: Identifier for the candidate type.\n- **description**: Description of the candidate type. Can be 'chemical hybrid', 'interleaved', 'neighbouring', or 'single'.\n\n## Table: antismash.clusterblast_algorithms\nThis table stores information about clusterblast algorithms.\nAvailable *ClusterBlast algorithms.\n\n- **algorithm_id**: Identifier for the algorithm.\n- **name**: Name of the algorithm. Value could be 'clusterblast','knownclusterblast', or 'subclusterblast'.\n\n\n## Table: antismash.comparippson_mibig_references\nThis table stores references to MIBIG entries used in comparative analysis.\n\n- **comparippson_mibig_id**: Identifier for the MIBIG reference.\n- **accession**: Accession number of the MIBIG entry.\n- **name**: Name of the MIBIG entry.\n- **product**: Product associated with the MIBIG entry.\n- **compound**: Compound associated with the MIBIG entry.\n\n## Table: antismash.filenames\nThis table stores information about filenames associated with assemblies.\nTracking a number of interesting filenames for an assembly id.\n\n- **assembly_id**: Identifier for the assembly.\n- **base_filename**: Base filename for the assembly.\n\n## Table: antismash.functional_classes\nThis table stores information about functional classes.\nAn index of possible functional classes.\n\n- **functional_class_id**: Identifier for the functional class.\n- **name**: Name of the functional class. Values for basic functional classes are 'biosynthetic', 'regulator', 'transporter', or 'other'. Advanced classes are 'bgc_seed' and 'biosynthetic_smcog', which are the child of parent class 'biosynthetic'.\n- **parent_id**: Identifier for the parent functional class, if applicable.\n\n## Table: antismash.gene_ontologies\nThis table stores information about gene ontologies.\n\n- **go_id**: Identifier for the gene ontology.\n- **identifier**: Unique identifier for the gene ontology.\n- **description**: Description of the gene ontology.\n\n## Table: antismash.module_domain_functions\nThis table stores information about functions associated with module domains in table antismash.modules.\n\n- **function_id**: Identifier for the function.\n- **FUNCTION**: Description of the function. Values could be 'starter','loader', 'carrier_protein', 'modification', 'finalisation', or 'other'.\n\n## Table: antismash.pfams\nThis table stores information about Pfam entries.\npfam domain metadata.\n\n- **pfam_id**: Identifier for the Pfam entry.\n- **name**: Name of the Pfam entry.\n- **description**: Description of the Pfam entry.\n- **trusted_cutoff**: Trusted cutoff value for the Pfam entry.\n\n## Table: antismash.profiles\nThis table stores information about HMM profiles.\nHMM profiles used during cluster detection.\n\n- **name**: Name of the profile.\n- **description**: Description of the profile.\n- **cutoff**: Cutoff value for the profile.\n- **filename**: Filename associated with the profile.\n\n## Table: antismash.regulators\nThis table stores information about regulators, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **regulator_id**: Identifier for the regulator.\n- **name**: Name of the regulator.\n- **description**: Description of the regulator.\n\n## Table: antismash.regulator_confidence\nThis table stores information about regulator confidence levels, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **confidence_id**: Identifier for the confidence level.\n- **name**: Name of the confidence level. Can be 'weak', 'medium', or 'strong'.\n- **strength**: Strength of the confidence level.\n\n## Table: antismash.resfams\nThis table stores information about Resfam entries.\n\n- **resfam_id**: Identifier for the Resfam entry.\n- **accession**: Accession number of the Resfam entry.\n- **name**: Name of the Resfam entry.\n- **description**: Description of the Resfam entry.\n\n## Table: antismash.sampling_sites\nThis table stores information about sampling sites.\nA site where a biological sample was taken.\n\n- **site_id**: Identifier for the sampling site.\n\n## Table: antismash.substrates\nThis table stores information about substrates.\n\n- **substrate_id**: Identifier for the substrate.\n- **name**: Name of the substrate.\n- **description**: Description of the substrate.\n\n## Table: antismash.t2pks_products\nThis table stores information about T2PKS products.\n\n- **product_type**: Type of the product.\n- **product_function**: Function of the product.\n\n## Table: antismash.t2pks_profiles\nThis table stores information about T2PKS profiles.\n\n- **profile_id**: Identifier for the profile.\n- **name**: Name of the profile.\n- **description**: Description of the profile.\n\n## Table: antismash.taxa\nThis table stores NCBI taxonomic classification information.\n\n- **tax_id**: Identifier for the taxonomic entry.\n- **ncbi_taxid**: NCBI taxonomic identifier.\n- **superkingdom**: Superkingdom classification.\n- **kingdom**: Kingdom classification.\n- **phylum**: Phylum classification.\n- **class**: Class classification.\n- **taxonomic_order**: Order classification.\n- **family**: Family classification.\n- **genus**: Genus classification.\n- **species**: Species classification.\n- **strain**: Strain classification.\n- **name**: Name of the taxonomic entry.\n\n## Table: antismash.tigrfams\nThis table stores information about TIGRFAM entries.\ntigrfam domain metadata.\n\n- **tigrfam_id**: Identifier for the TIGRFAM entry.\n- **name**: Name of the TIGRFAM entry.\n- **description**: Description of the TIGRFAM entry.\n- **trusted_cutoff**: Trusted cutoff value for the TIGRFAM entry.\n\n## Table: antismash.bgc_types\nThis table stores information about BGC types.\nBiosynthetic gene cluster types.\n\n- **bgc_type_id**: Identifier for the BGC type.\n- **term**: Term associated with the BGC type.\n- **description**: Description of the BGC type.\n- **category**: Category associated with the BGC type.\n\n## Table: antismash.monomers\nThis table stores information about monomers.\n\n- **monomer_id**: Identifier for the monomer.\n- **substrate_id**: Identifier for the substrate associated with the monomer.\n- **name**: Name of the monomer.\n- **description**: Description of the monomer.\n\n## Table: antismash.rel_as_domain_to_subtype\nThis table stores relationships between domain subtypes and domains.\nRelationships between a specific aSDomain and subtypes.\n\n- **as_domain_id**: Identifier for the domain.\n- **subtype**: Identifier for the subtype.\n\n## Table: antismash.samples\nThis table stores information about samples.\nA biological sample.\n\n- **sample_id**: Identifier for the sample.\n- **habitat**: Habitat where the sample was collected.\n- **TIME**: Time when the sample was collected.\n- **site_id**: Identifier for the sampling site.\n\n## Table: antismash.smcogs\nThis table stores information about SMCOG entries.\nSecondary Metabolite specific Clusters of Orthologous Groups (smCoGs).\n\n- **smcog_id**: Identifier for the SMCOG entry.\n- **name**: Name of the SMCOG entry.\n- **description**: Description of the SMCOG entry.\n- **functional_class_id**: Identifier for the functional class associated with the SMCOG entry.\n\n## Table: antismash.bgc_rules\nThis table stores information about BGC rules.\nThe detection rule used for a specific BGC type.\n\n- **bgc_rule_id**: Identifier for the BGC rule.\n- **RULE**: Description of the rule.\n- **bgc_type_id**: Identifier for the BGC type associated with the rule.\n\n## Table: antismash.isolates\nThis table stores information about isolates.\nA single biological isolate, sample or strain.\n\n- **isolate_id**: Identifier for the isolate.\n- **sample_id**: Identifier for the sample associated with the isolate.\n\n## Table: antismash.genomes\nThis table stores information about genomes.\nInformation on a genome.\n\n- **genome_id**: Identifier for the genome.\n- **tax_id**: Identifier for the taxonomic entry associated with the genome.\n- **bio_project**: BioProject associated with the genome.\n- **bio_sample**: BioSample associated with the genome.\n- **isolate_id**: Identifier for the isolate associated with the genome.\n- **assembly_id**: Identifier for the assembly associated with the genome.\n\n## Table: antismash.dna_sequences\nThis table stores information about DNA sequences.\n\n- **dna**: DNA sequence.\n- **md5**: MD5 checksum of the DNA sequence.\n- **accession**: Accession number for the DNA sequence.\n- **definition**: Definition of the DNA sequence.\n- **contig_type**: Type of the contig.\n- **chromosome_type**: Type of the chromosome.\n- **record_number**: Record number for the DNA sequence.\n- **VERSION**: Version of the DNA sequence.\n- **genome_id**: Identifier for the genome associated with the DNA sequence.\n\n## Table: antismash.regions\nThis table stores information about regions in the DNA sequences containing Biosynthetic Gene Clusters as predicted by antiSMASH. People commonly refers to region when mentioning a BGC.\nA region of interest as predicted by antiSMASH.\n\n- **region_id**: Identifier for the region.\n- **accession**: Accession number for the DNA sequence associated with the region.\n- **region_number**: Number of the region.\n- **LOCATION**: Location of the region.\n- **start_pos**: Start position of the region.\n- **end_pos**: End position of the region.\n- **contig_edge**: Indicates if the region is at the contig edge.\n- **best_mibig_hit_acc**: Best MIBIG hit accession number.\n- **best_mibig_hit_description**: Best MIBIG hit description.\n- **best_mibig_hit_similarity**: Best MIBIG hit similarity.\n\n## Table: antismash.rel_regions_types\nThis table stores relationships between regions and BGC types.\n\n- **region_id**: Identifier for the region.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.tta_codons\nThis table stores information about TTA codons. This codon are quite rare in GC-rich organism such as Streptomyces. While genes involved in primary metabolism almost exclusively use CTC codons to code for Leu, key genes in secondary metabolism and cell differentiation often contain TTA codons.\nA TTA codon record.\n\n- **tta_codon_id**: Identifier for the TTA codon.\n- **seq_id**: Identifier for the DNA sequence.\n- **LOCATION**: Location of the TTA codon in the DNA sequence.\n\n## Table: antismash.binding_sites\nThis table stores information about binding sites of regulators, part of the antiSMASH TFBS (transcription factor binding site) finder feature.\n\n- **binding_site_id**: Identifier for the binding site.\n- **regulator_id**: Identifier for the regulator.\n- **region_id**: Identifier for the region.\n- **score**: Score of the binding site.\n- **START**: Start position of the binding site.\n- **confidence_id**: Identifier for the confidence level.\n\n## Table: antismash.candidates\nThis table stores information about candidates cluster.\nA candidate cluster as predicted by antiSMASH.\n\n- **candidate_id**: Identifier for the candidate.\n- **region_id**: Identifier for the region.\n- **LOCATION**: Location of the candidate in the region.\n- **candidate_type_id**: Identifier for the candidate type.\n- **smiles**: SMILES notation for the candidate.\n- **polymer**: Polymer information for the candidate.\n\n## Table: antismash.cdss\nThis table stores information about coding sequences (CDSs).\nA CDS record.\n\n- **cds_id**: Identifier for the CDS.\n- **functional_class_id**: Identifier for the functional class associated with the CDS.\n- **locus_tag**: Locus tag of the CDS.\n- **name**: Name of the CDS.\n- **product**: Product encoded by the CDS.\n- **protein_id**: Protein identifier for the CDS.\n- **TRANSLATION**: Translation of the CDS.\n- **LOCATION**: Location of the CDS in the region.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.clusterblast_hits\nThis table stores information about clusterblast hits.\nClusterBlast hit storage, also for Sub- and KnownClusterblast.\n\n- **clusterblast_hit_id**: Identifier for the clusterblast hit.\n- **region_id**: Identifier for the region.\n- **rank**: Rank of the clusterblast hit.\n- **acc**: Accession number of the clusterblast hit.\n- **description**: Description of the clusterblast hit.\n- **similarity**: Similarity of the clusterblast hit.\n- **algorithm_id**: Identifier for the algorithm used.\n\n## Table: antismash.comparippson_asdb_references\nThis table stores references to ASDB entries used in comparative analysis.\n\n- **comparippson_asdb_id**: Identifier for the ASDB reference.\n- **cds_id**: Identifier for the CDS.\n- **product**: Product associated with the ASDB reference.\n\n## Table: antismash.comparippson_hits\nThis table stores information about comparippson hits.\nCompaRiPPson hits storage for both MIBiG and aS-DB.\n\n- **comparippson_hit_id**: Identifier for the comparippson hit.\n- **cds_id**: Identifier for the CDS.\n- **similarity**: Similarity of the comparippson hit.\n- **region_id**: Identifier for the region.\n- **comparippson_mibig_id**: Identifier for the MIBIG reference.\n- **comparippson_asdb_id**: Identifier for the ASDB reference.\n\n## Table: antismash.genes\nThis table stores information about genes.\nA gene record.\n\n- **gene_id**: Identifier for the gene.\n- **locus_tag**: Locus tag of the gene.\n- **LOCATION**: Location of the gene in the region.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.modules\nThis table stores information about modules.\nAn NRPS/PKS module with multiple child domains, the loaded substrate and resulting modified monomer.\n\n- **module_id**: Identifier for the module.\n- **LOCATION**: Location of the module.\n- **TYPE**: Type of the module.\n- **trans_at**: Indicates if the module is trans-AT.\n- **complete**: Indicates if the module is complete.\n- **iterative**: Indicates if the module is iterative.\n- **multi_gene**: Indicates if the module is multi-gene.\n- **region_id**: Identifier for the region.\n\n## Table: antismash.pfam_domains\nThis table stores information about Pfam domains.\nA PFAM domain prediction.\n\n- **pfam_domain_id**: Identifier for the Pfam domain.\n- **DATABASE**: Database associated with the Pfam domain.\n- **detection**: Detection method for the Pfam domain.\n- **score**: Score of the Pfam domain.\n- **evalue**: E-value of the Pfam domain.\n- **TRANSLATION**: Translation of the Pfam domain.\n- **pfam_id**: Identifier for the Pfam entry.\n- **LOCATION**: Location of the Pfam domain.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.pfam_go_entries\nThis table stores relationships between Pfam domains and gene ontologies.\n\n- **pfam_domain_id**: Identifier for the Pfam domain.\n- **go_id**: Identifier for the gene ontology.\n\n## Table: antismash.profile_hits\nThis table stores information about profile hits.\n\n- **profile_hit_id**: Identifier for the profile hit.\n- **cds_id**: Identifier for the CDS.\n- **name**: Name of the profile.\n- **evalue**: E-value of the profile hit.\n- **bitscore**: Bit score of the profile hit.\n- **seeds**: Number of seeds for the profile hit.\n\n## Table: antismash.protoclusters\nThis table stores information about protoclusters.\nA protocluster as predicted by antiSMASH.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **region_id**: Identifier for the region.\n- **LOCATION**: Location of the protocluster.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.rel_candidates_modules\nThis table stores relationships between candidates and modules.\nMany to many relation for compounds to modules.\n\n- **candidate_id**: Identifier for the candidate.\n- **module_id**: Identifier for the module.\n\n## Table: antismash.rel_candidates_protoclusters\nThis table stores relationships between candidates and protoclusters.\nMany to many relation for candidates to protoclusters\n\n- **candidate_id**: Identifier for the candidate.\n- **protocluster_id**: Identifier for the protocluster.\n\n## Table: antismash.rel_candidates_types\nThis table stores relationships between candidates and BGC types.\nMany to many relation for candidates and bgc_types.\n\n- **candidate_id**: Identifier for the candidate.\n- **bgc_type_id**: Identifier for the BGC type.\n\n## Table: antismash.rel_cds_candidates\nThis table stores relationships between CDSs and candidates.\nMany to many relation for CDSs to candidates.\n\n- **candidate_id**: Identifier for the candidate.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.rel_cds_protoclusters\nThis table stores relationships between CDSs and protoclusters.\nMany to many relation for CDSs to protoclusters.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.rel_modules_monomers\nThis table stores relationships between modules and monomers.\nMany to many relation for modules to substrates and monomers.\n\n- **module_id**: Identifier for the module.\n- **substrate**: Identifier for the substrate.\n- **monomer**: Identifier for the monomer.\n\n## Table: antismash.resfam_domains\nThis table stores information about Resfam domains.\n\n- **resfam_domain_id**: Identifier for the Resfam domain.\n- **score**: Score of the Resfam domain.\n- **evalue**: E-value of the Resfam domain.\n- **resfam_id**: Identifier for the Resfam entry.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.ripps\nThis table stores information about RiPPs (Ribosomally synthesized and Post-translationally modified Peptides).\nA (predicted) ribosomally preduced peptide compound.\n\n- **protocluster_id**: Identifier for the protocluster.\n- **peptide_sequence**: Peptide sequence of the RiPP.\n- **molecular_weight**: Molecular weight of the RiPP.\n- **monoisotopic_mass**: Monoisotopic mass of the RiPP.\n- **alternative_weights**: Alternative weights of the RiPP.\n- **bridges**: Number of bridges in the RiPP.\n- **CLASS**: Class of the RiPP.\n- **subclass**: Subclass of the RiPP.\n- **score**: Score of the RiPP.\n- **locus_tag**: Locus tag associated with the RiPP.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.smcog_hits\nThis table stores information about SMCOG hits.\nMetadata about an smCoG hit.\n\n- **smcog_id**: Identifier for the SMCOG entry.\n- **cds_id**: Identifier for the CDS.\n- **score**: Score of the SMCOG hit.\n- **evalue**: E-value of the SMCOG hit.\n- **image_path**: Path to the image associated with the SMCOG hit.\n\n## Table: antismash.t2pks\nThis table stores information about T2PKS (Type II Polyketide Synthases).\nPredicted compound details for a Type II PKS.\n\n- **t2pks_id**: Identifier for the T2PKS.\n- **protocluster_id**: Identifier for the protocluster.\n\n## Table: antismash.t2pks_cds_domain\nThis table stores information about T2PKS CDS domains.\n\n- **domain_id**: Identifier for the domain.\n- **t2pks_id**: Identifier for the T2PKS.\n- **cds_id**: Identifier for the CDS.\n- **profile_id**: Identifier for the profile.\n- **protein_type**: Type of the protein.\n- **protein_function**: Function of the protein.\n- **evalue**: E-value of the domain.\n- **bitscore**: Bit score of the domain.\n\n## Table: antismash.t2pks_product_classes\nThis table stores relationships between T2PKS and product classes.\n\n- **t2pks_id**: Identifier for the T2PKS.\n- **product_class**: Product class associated with the T2PKS.\n\n## Table: antismash.t2pks_starters\nThis table stores information about T2PKS starters.\nA Type II PKS-specific starter domain.\n\n- **domain_id**: Identifier for the domain.\n- **t2pks_id**: Identifier for the T2PKS.\n- **name**: Name of the starter.\n- **evalue**: E-value of the starter.\n- **bitscore**: Bit score of the starter.\n\n## Table: antismash.t2pks_starter_elongation\nThis table stores information about T2PKS starter elongation combinations.\n\n- **combo_id**: Identifier for the combination.\n- **domain_id**: Identifier for the domain.\n- **elongation**: Elongation value.\n- **weight**: Weight of the elongation combination.\n\n## Table: antismash.tigrfam_domains\nThis table stores information about TIGRFAM domains.\nA TIGRFAM domain prediction.\n\n- **tigrfam_domain_id**: Identifier for the TIGRFAM domain.\n- **DATABASE**: Database associated with the TIGRFAM domain.\n- **detection**: Detection method for the TIGRFAM domain.\n- **score**: Score of the TIGRFAM domain.\n- **evalue**: E-value of the TIGRFAM domain.\n- **TRANSLATION**: Translation of the TIGRFAM domain.\n- **tigrfam_id**: Identifier for the TIGRFAM entry.\n- **LOCATION**: Location of the TIGRFAM domain.\n- **cds_id**: Identifier for the CDS.\n\n## Table: antismash.as_domains\nThis table stores information about domains.\nA functional domain on a gene as predicted by antiSMASH.\n\n- **as_domain_id**: Identifier for the domain.\n- **detection**: Detection method for the domain.\n- **score**: Score of the domain.\n- **evalue**: E-value of the domain.\n- **TRANSLATION**: Translation of the domain.\n- **pks_signature**: PKS signature of the domain.\n- **minowa**: Minowa score of the domain. This score predicts the specificity of adenylation domains in nonribosomal peptide synthetases (NRPS).\n- **nrps_predictor**: NRPS predictor score.\n- **stachelhaus**: Stachelhaus score. This score predicts the specificity of adenylation domains in nonribosomal peptide synthetases (NRPS).\n- **consensus**: Consensus sequence of the domain.\n- **kr_activity**: Indicates if the domain has (keto reductase) KR activity.\n- **kr_stereochemistry**: Stereochemistry of the (keto reductase) KR activity.\n- **as_domain_profile_id**: Identifier for the domain profile.\n- **LOCATION**: Location of the domain.\n- **cds_id**: Identifier for the CDS.\n- **module_id**: Identifier for the module.\n- **function_id**: Identifier for the function.\n- **follows**: Indicates if the domain follows another domain.\n\n## Table: antismash.cluster_compare_hits\nThis table stores information about cluster comparison hits.\nClusterCompare hit storage.\n\n- **hit_id**: Identifier for the cluster comparison hit.\n- **region_id**: Identifier for the region.\n- **protocluster_id**: Identifier for the protocluster.\n- **reference_accession**: Reference accession number.\n- **description**: Description of the cluster comparison hit.\n- **score**: Score of the cluster comparison hit.\n- **identity_metric**: Identity metric of the cluster comparison hit.\n- **order_metric**: Order metric of the cluster comparison hit.\n- **components_metric**: Components metric of the cluster comparison hit.\n\n## Table: antismash.rel_as_domains_substrates\nThis table stores relationships between AS domains and substrates.\nMany to many relation for as_domains to substrate.\n\n- **as_domain_id**: Identifier for the AS domain.\n- **substrate_id**: Identifier for the substrate.\n- **position_in_domain**: Position of the substrate in the domain.\n\n## Table: antismash.sequence_gc_content\nThis view stores GC content information for sequences.\n\n- **accession**: Accession number for the DNA sequence.\n- **gc_content**: GC content percentage of the DNA sequence.\n\n## Table: antismash.sequence_lengths\nThis view stores sequence length information.\n\n- **accession**: Accession number for the DNA sequence.\n- **seq_length**: Length of the DNA sequence.\n\n\nThe following columns are in the as_domains table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name          | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:---------------------|:------------|:-----------------|\n|  0 | antismash_db    | antismash      | as_domains   | as_domain_id         | INTEGER     |                  |\n|  1 | antismash_db    | antismash      | as_domains   | detection            | VARCHAR     |                  |\n|  2 | antismash_db    | antismash      | as_domains   | score                | DOUBLE      |                  |\n|  3 | antismash_db    | antismash      | as_domains   | evalue               | DOUBLE      |                  |\n|  4 | antismash_db    | antismash      | as_domains   | TRANSLATION          | VARCHAR     |                  |\n|  5 | antismash_db    | antismash      | as_domains   | pks_signature        | VARCHAR     |                  |\n|  6 | antismash_db    | antismash      | as_domains   | minowa               | VARCHAR     |                  |\n|  7 | antismash_db    | antismash      | as_domains   | nrps_predictor       | VARCHAR     |                  |\n|  8 | antismash_db    | antismash      | as_domains   | stachelhaus          | VARCHAR     |                  |\n|  9 | antismash_db    | antismash      | as_domains   | consensus            | VARCHAR     |                  |\n| 10 | antismash_db    | antismash      | as_domains   | kr_activity          | BOOLEAN     |                  |\n| 11 | antismash_db    | antismash      | as_domains   | kr_stereochemistry   | VARCHAR     |                  |\n| 12 | antismash_db    | antismash      | as_domains   | as_domain_profile_id | INTEGER     |                  |\n| 13 | antismash_db    | antismash      | as_domains   | LOCATION             | VARCHAR     |                  |\n| 14 | antismash_db    | antismash      | as_domains   | cds_id               | INTEGER     |                  |\n| 15 | antismash_db    | antismash      | as_domains   | module_id            | INTEGER     |                  |\n| 16 | antismash_db    | antismash      | as_domains   | function_id          | INTEGER     |                  |\n| 17 | antismash_db    | antismash      | as_domains   | follows              | INTEGER     |                  |\n\nThe following columns are in the pfam_domains table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name    | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------|:------------|:-----------------|\n| 137 | antismash_db    | antismash      | pfam_domains | pfam_domain_id | INTEGER     |                  |\n| 138 | antismash_db    | antismash      | pfam_domains | DATABASE       | VARCHAR     |                  |\n| 139 | antismash_db    | antismash      | pfam_domains | detection      | VARCHAR     |                  |\n| 140 | antismash_db    | antismash      | pfam_domains | score          | DOUBLE      |                  |\n| 141 | antismash_db    | antismash      | pfam_domains | evalue         | DOUBLE      |                  |\n| 142 | antismash_db    | antismash      | pfam_domains | TRANSLATION    | VARCHAR     |                  |\n| 143 | antismash_db    | antismash      | pfam_domains | pfam_id        | VARCHAR     |                  |\n| 144 | antismash_db    | antismash      | pfam_domains | LOCATION       | VARCHAR     |                  |\n| 145 | antismash_db    | antismash      | pfam_domains | cds_id         | INTEGER     |                  |\n\nThe following columns are in the as_domain_profiles table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name          | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:---------------------|:------------|:-----------------|\n| 18 | antismash_db    | antismash      | as_domain_profiles | as_domain_profile_id | INTEGER     |                  |\n| 19 | antismash_db    | antismash      | as_domain_profiles | name                 | VARCHAR     |                  |\n| 20 | antismash_db    | antismash      | as_domain_profiles | description          | VARCHAR     |                  |\n| 21 | antismash_db    | antismash      | as_domain_profiles | DATABASE             | VARCHAR     |                  |\n| 22 | antismash_db    | antismash      | as_domain_profiles | TYPE                 | VARCHAR     |                  |\n\nThe following columns are in the as_domain_subtypes table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 23 | antismash_db    | antismash      | as_domain_subtypes | subtype       | VARCHAR     |                  |\n| 24 | antismash_db    | antismash      | as_domain_subtypes | description   | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "What are the different domain profiles available in the antiSMASH database?"}, {"role": "assistant", "content": "SELECT * FROM antismash.as_domain_profiles;"}, {"role": "user", "content": "What are the available antiSMASH domain subtypes and their descriptions?"}, {"role": "assistant", "content": "SELECT * FROM antismash.as_domain_subtypes;"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Which domains are linked to a particular substrate?"}, {"role": "assistant", "content": "SELECT * FROM antismash.rel_as_domains_substrates WHERE substrate_id = 1;"}, {"role": "user", "content": "What kind of functional classes are in the antiSMASH database?"}, {"role": "assistant", "content": "SELECT * FROM antismash.functional_classes;"}, {"role": "user", "content": "What tigrfam domains are related to a specific CDS?"}, {"role": "assistant", "content": "SELECT * FROM antismash.tigrfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset."}, {"role": "assistant", "content": "SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "What binding sites are linked to a specific regulator and their details?"}, {"role": "assistant", "content": "SELECT * FROM antismash.binding_sites WHERE regulator_id = 1;"}, {"role": "user", "content": "What profiles hit a specific CDS and what are their details?"}, {"role": "assistant", "content": "SELECT * FROM antismash.profile_hits WHERE cds_id = 1;"}, {"role": "user", "content": "What are the different domain profiles available in the antiSMASH database? For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:28,117 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:28,118 - ERROR - Failed to process question 8: What are the different domain profiles available in the antiSMASH database?. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:28,118 - INFO - ---DONE---
2024-08-15 12:27:28,118 - INFO - Processing question 22: Summarize the genus distribution in the antiSMASH dataset.
2024-08-15 12:27:28,170 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:28.116447986Z', 'message': {'role': 'assistant', 'content': 'SELECT DISTINCT `name` FROM `antismash`.as_domain_profiles;'}, 'done_reason': 'stop', 'done': True, 'total_duration': 763762180, 'load_duration': 24703050, 'prompt_eval_count': 1026, 'prompt_eval_duration': 418056000, 'eval_count': 16, 'eval_duration': 190653000}
LLM Response: SELECT DISTINCT `name` FROM `antismash`.as_domain_profiles;
Info: Output from LLM: SELECT DISTINCT `name` FROM `antismash`.as_domain_profiles; 
Extracted SQL: SELECT DISTINCT `name` FROM `antismash`.as_domain_profiles
SELECT DISTINCT `name` FROM `antismash`.as_domain_profiles
Couldn't run sql:  Parser Error: syntax error at or near "`"
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the taxa table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 265 | antismash_db    | antismash      | taxa         | tax_id          | INTEGER     |                  |\n| 266 | antismash_db    | antismash      | taxa         | ncbi_taxid      | INTEGER     |                  |\n| 267 | antismash_db    | antismash      | taxa         | superkingdom    | VARCHAR     |                  |\n| 268 | antismash_db    | antismash      | taxa         | kingdom         | VARCHAR     |                  |\n| 269 | antismash_db    | antismash      | taxa         | phylum          | VARCHAR     |                  |\n| 270 | antismash_db    | antismash      | taxa         | CLASS           | VARCHAR     |                  |\n| 271 | antismash_db    | antismash      | taxa         | taxonomic_order | VARCHAR     |                  |\n| 272 | antismash_db    | antismash      | taxa         | family          | VARCHAR     |                  |\n| 273 | antismash_db    | antismash      | taxa         | genus           | VARCHAR     |                  |\n| 274 | antismash_db    | antismash      | taxa         | species         | VARCHAR     |                  |\n| 275 | antismash_db    | antismash      | taxa         | strain          | VARCHAR     |                  |\n| 276 | antismash_db    | antismash      | taxa         | name            | VARCHAR     |                  |\n\nThe following columns are in the sampling_sites table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name     | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:---------------|:--------------|:------------|:-----------------|\n| 222 | antismash_db    | antismash      | sampling_sites | site_id       | INTEGER     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the samples table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 218 | antismash_db    | antismash      | samples      | sample_id     | INTEGER     |                  |\n| 219 | antismash_db    | antismash      | samples      | habitat       | VARCHAR     |                  |\n| 220 | antismash_db    | antismash      | samples      | TIME          | VARCHAR     |                  |\n| 221 | antismash_db    | antismash      | samples      | site_id       | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the monomers table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 128 | antismash_db    | antismash      | monomers     | monomer_id    | INTEGER     |                  |\n| 129 | antismash_db    | antismash      | monomers     | substrate_id  | INTEGER     |                  |\n| 130 | antismash_db    | antismash      | monomers     | name          | VARCHAR     |                  |\n| 131 | antismash_db    | antismash      | monomers     | description   | VARCHAR     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset.'}, {'role': 'assistant', 'content': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;'}, {'role': 'user', 'content': 'How many Streptomyces genomes are in the dataset?'}, {'role': 'assistant', 'content': "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'Summarize all taxa of the genomes and their details.'}, {'role': 'assistant', 'content': 'SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;'}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Get me all region with knownclusterblast hits above 80 percent similarity.'}, {'role': 'assistant', 'content': 'SELECT best_mibig_hit_description, COUNT(*) as occurrence_count FROM antismash.regions WHERE best_mibig_hit_similarity > 80 GROUP BY best_mibig_hit_description ORDER BY occurrence_count DESC;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset. For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the taxa table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 265 | antismash_db    | antismash      | taxa         | tax_id          | INTEGER     |                  |\n| 266 | antismash_db    | antismash      | taxa         | ncbi_taxid      | INTEGER     |                  |\n| 267 | antismash_db    | antismash      | taxa         | superkingdom    | VARCHAR     |                  |\n| 268 | antismash_db    | antismash      | taxa         | kingdom         | VARCHAR     |                  |\n| 269 | antismash_db    | antismash      | taxa         | phylum          | VARCHAR     |                  |\n| 270 | antismash_db    | antismash      | taxa         | CLASS           | VARCHAR     |                  |\n| 271 | antismash_db    | antismash      | taxa         | taxonomic_order | VARCHAR     |                  |\n| 272 | antismash_db    | antismash      | taxa         | family          | VARCHAR     |                  |\n| 273 | antismash_db    | antismash      | taxa         | genus           | VARCHAR     |                  |\n| 274 | antismash_db    | antismash      | taxa         | species         | VARCHAR     |                  |\n| 275 | antismash_db    | antismash      | taxa         | strain          | VARCHAR     |                  |\n| 276 | antismash_db    | antismash      | taxa         | name            | VARCHAR     |                  |\n\nThe following columns are in the sampling_sites table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name     | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:---------------|:--------------|:------------|:-----------------|\n| 222 | antismash_db    | antismash      | sampling_sites | site_id       | INTEGER     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the samples table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 218 | antismash_db    | antismash      | samples      | sample_id     | INTEGER     |                  |\n| 219 | antismash_db    | antismash      | samples      | habitat       | VARCHAR     |                  |\n| 220 | antismash_db    | antismash      | samples      | TIME          | VARCHAR     |                  |\n| 221 | antismash_db    | antismash      | samples      | site_id       | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the monomers table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 128 | antismash_db    | antismash      | monomers     | monomer_id    | INTEGER     |                  |\n| 129 | antismash_db    | antismash      | monomers     | substrate_id  | INTEGER     |                  |\n| 130 | antismash_db    | antismash      | monomers     | name          | VARCHAR     |                  |\n| 131 | antismash_db    | antismash      | monomers     | description   | VARCHAR     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset."}, {"role": "assistant", "content": "SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;"}, {"role": "user", "content": "How many Streptomyces genomes are in the dataset?"}, {"role": "assistant", "content": "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Summarize all taxa of the genomes and their details."}, {"role": "assistant", "content": "SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Get me all region with knownclusterblast hits above 80 percent similarity."}, {"role": "assistant", "content": "SELECT best_mibig_hit_description, COUNT(*) as occurrence_count FROM antismash.regions WHERE best_mibig_hit_similarity > 80 GROUP BY best_mibig_hit_description ORDER BY occurrence_count DESC;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:29,348 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:29,349 - ERROR - Failed to process question 22: Summarize the genus distribution in the antiSMASH dataset.. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:29,349 - INFO - ---DONE---
2024-08-15 12:27:29,350 - INFO - Processing question 24: Which genome has the longest DNA sequence?
2024-08-15 12:27:29,388 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:29.347969678Z', 'message': {'role': 'assistant', 'content': '```sql\nSELECT \n    COUNT(DISTINCT T1.genus) AS num_genus,\n    T1.genus \nFROM \n    antismash.samples AS T1\nGROUP BY \n    T1.genus;\n```'}, 'done_reason': 'stop', 'done': True, 'total_duration': 1153079324, 'load_duration': 27793074, 'prompt_eval_count': 1026, 'prompt_eval_duration': 408444000, 'eval_count': 48, 'eval_duration': 594973000}
LLM Response: ```sql
SELECT 
    COUNT(DISTINCT T1.genus) AS num_genus,
    T1.genus 
FROM 
    antismash.samples AS T1
GROUP BY 
    T1.genus;
```
Info: Output from LLM: ```sql
SELECT 
    COUNT(DISTINCT T1.genus) AS num_genus,
    T1.genus 
FROM 
    antismash.samples AS T1
GROUP BY 
    T1.genus;
``` 
Extracted SQL: SELECT 
    COUNT(DISTINCT T1.genus) AS num_genus,
    T1.genus 
FROM 
    antismash.samples AS T1
GROUP BY 
    T1.genus
SELECT 
    COUNT(DISTINCT T1.genus) AS num_genus,
    T1.genus 
FROM 
    antismash.samples AS T1
GROUP BY 
    T1.genus
Couldn't run sql:  Binder Error: Table "T1" does not have a column named "genus"
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the gene_ontologies table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name      | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------|:--------------|:------------|:-----------------|\n| 107 | antismash_db    | antismash      | gene_ontologies | go_id         | INTEGER     |                  |\n| 108 | antismash_db    | antismash      | gene_ontologies | identifier    | VARCHAR     |                  |\n| 109 | antismash_db    | antismash      | gene_ontologies | description   | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Which genome has the longest DNA sequence?'}, {'role': 'assistant', 'content': 'SELECT g.*, LENGTH(d.dna) as dna_length FROM antismash.genomes g JOIN antismash.dna_sequences d ON g.genome_id = d.genome_id ORDER BY LENGTH(d.dna) DESC LIMIT 1;'}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'How many Streptomyces genomes are in the dataset?'}, {'role': 'assistant', 'content': "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {'role': 'user', 'content': 'Summarize all taxa of the genomes and their details.'}, {'role': 'assistant', 'content': 'SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset.'}, {'role': 'assistant', 'content': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;'}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Which genome has the longest DNA sequence? For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the gene_ontologies table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name      | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------|:--------------|:------------|:-----------------|\n| 107 | antismash_db    | antismash      | gene_ontologies | go_id         | INTEGER     |                  |\n| 108 | antismash_db    | antismash      | gene_ontologies | identifier    | VARCHAR     |                  |\n| 109 | antismash_db    | antismash      | gene_ontologies | description   | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Which genome has the longest DNA sequence?"}, {"role": "assistant", "content": "SELECT g.*, LENGTH(d.dna) as dna_length FROM antismash.genomes g JOIN antismash.dna_sequences d ON g.genome_id = d.genome_id ORDER BY LENGTH(d.dna) DESC LIMIT 1;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "How many Streptomyces genomes are in the dataset?"}, {"role": "assistant", "content": "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {"role": "user", "content": "Summarize all taxa of the genomes and their details."}, {"role": "assistant", "content": "SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset."}, {"role": "assistant", "content": "SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Which genome has the longest DNA sequence? For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:30,615 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:30,643 - ERROR - Failed to process question 24: Which genome has the longest DNA sequence?. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:30,643 - INFO - ---DONE---
2024-08-15 12:27:30,643 - INFO - Processing question 25: Which regions has iterative modules?
2024-08-15 12:27:30,693 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:30.614813719Z', 'message': {'role': 'assistant', 'content': "SELECT T1.genome_id FROM genes AS T1 INNER JOIN isolates AS T2 ON T1.isolate_id = T2.isolate_id WHERE T1.location LIKE '%DNA%' ORDER BY LENGTH(T1.peptide_sequence) DESC LIMIT 1;"}, 'done_reason': 'stop', 'done': True, 'total_duration': 1206466836, 'load_duration': 23777593, 'prompt_eval_count': 1026, 'prompt_eval_duration': 405943000, 'eval_count': 53, 'eval_duration': 661445000}
LLM Response: SELECT T1.genome_id FROM genes AS T1 INNER JOIN isolates AS T2 ON T1.isolate_id = T2.isolate_id WHERE T1.location LIKE '%DNA%' ORDER BY LENGTH(T1.peptide_sequence) DESC LIMIT 1;
Info: Output from LLM: SELECT T1.genome_id FROM genes AS T1 INNER JOIN isolates AS T2 ON T1.isolate_id = T2.isolate_id WHERE T1.location LIKE '%DNA%' ORDER BY LENGTH(T1.peptide_sequence) DESC LIMIT 1; 
Extracted SQL: SELECT T1.genome_id FROM genes AS T1 INNER JOIN isolates AS T2 ON T1.isolate_id = T2.isolate_id WHERE T1.location LIKE '%DNA%' ORDER BY LENGTH(T1.peptide_sequence) DESC LIMIT 1
SELECT T1.genome_id FROM genes AS T1 INNER JOIN isolates AS T2 ON T1.isolate_id = T2.isolate_id WHERE T1.location LIKE '%DNA%' ORDER BY LENGTH(T1.peptide_sequence) DESC LIMIT 1
Couldn't run sql:  Catalog Error: Table with name genes does not exist!
Did you mean "antismash.genes"?
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the candidates table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name       | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:------------------|:------------|:-----------------|\n| 40 | antismash_db    | antismash      | candidates   | candidate_id      | INTEGER     |                  |\n| 41 | antismash_db    | antismash      | candidates   | region_id         | INTEGER     |                  |\n| 42 | antismash_db    | antismash      | candidates   | LOCATION          | VARCHAR     |                  |\n| 43 | antismash_db    | antismash      | candidates   | candidate_type_id | INTEGER     |                  |\n| 44 | antismash_db    | antismash      | candidates   | smiles            | VARCHAR     |                  |\n| 45 | antismash_db    | antismash      | candidates   | polymer           | VARCHAR     |                  |\n\nThe following columns are in the binding_sites table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 34 | antismash_db    | antismash      | binding_sites | binding_site_id | INTEGER     |                  |\n| 35 | antismash_db    | antismash      | binding_sites | regulator_id    | INTEGER     |                  |\n| 36 | antismash_db    | antismash      | binding_sites | region_id       | INTEGER     |                  |\n| 37 | antismash_db    | antismash      | binding_sites | score           | FLOAT       |                  |\n| 38 | antismash_db    | antismash      | binding_sites | START           | INTEGER     |                  |\n| 39 | antismash_db    | antismash      | binding_sites | confidence_id   | INTEGER     |                  |\n\nThe following columns are in the modules table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 118 | antismash_db    | antismash      | modules      | module_id     | INTEGER     |                  |\n| 119 | antismash_db    | antismash      | modules      | LOCATION      | VARCHAR     |                  |\n| 120 | antismash_db    | antismash      | modules      | TYPE          | VARCHAR     |                  |\n| 121 | antismash_db    | antismash      | modules      | trans_at      | BOOLEAN     |                  |\n| 122 | antismash_db    | antismash      | modules      | complete      | BOOLEAN     |                  |\n| 123 | antismash_db    | antismash      | modules      | iterative     | BOOLEAN     |                  |\n| 124 | antismash_db    | antismash      | modules      | multi_gene    | BOOLEAN     |                  |\n| 125 | antismash_db    | antismash      | modules      | region_id     | INTEGER     |                  |\n\nThe following columns are in the module_domain_functions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name              | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------------|:--------------|:------------|:-----------------|\n| 126 | antismash_db    | antismash      | module_domain_functions | function_id   | INTEGER     |                  |\n| 127 | antismash_db    | antismash      | module_domain_functions | FUNCTION      | VARCHAR     |                  |\n\nThe following columns are in the cluster_compare_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name           | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------------|:--------------------|:------------|:-----------------|\n| 66 | antismash_db    | antismash      | cluster_compare_hits | hit_id              | INTEGER     |                  |\n| 67 | antismash_db    | antismash      | cluster_compare_hits | region_id           | INTEGER     |                  |\n| 68 | antismash_db    | antismash      | cluster_compare_hits | protocluster_id     | INTEGER     |                  |\n| 69 | antismash_db    | antismash      | cluster_compare_hits | reference_accession | VARCHAR     |                  |\n| 70 | antismash_db    | antismash      | cluster_compare_hits | description         | VARCHAR     |                  |\n| 71 | antismash_db    | antismash      | cluster_compare_hits | score               | FLOAT       |                  |\n| 72 | antismash_db    | antismash      | cluster_compare_hits | identity_metric     | FLOAT       |                  |\n| 73 | antismash_db    | antismash      | cluster_compare_hits | order_metric        | FLOAT       |                  |\n| 74 | antismash_db    | antismash      | cluster_compare_hits | components_metric   | FLOAT       |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Which regions has iterative modules?'}, {'role': 'assistant', 'content': 'SELECT r.*, m.* FROM antismash.regions r JOIN antismash.modules m ON r.region_id = m.region_id WHERE m.iterative = TRUE;'}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Find all lanthipeptide BGC type regions.'}, {'role': 'assistant', 'content': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'What are the genes located in a region_id 1?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.cdss WHERE region_id = 1;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Which regions has iterative modules? For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the candidates table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name       | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:------------------|:------------|:-----------------|\n| 40 | antismash_db    | antismash      | candidates   | candidate_id      | INTEGER     |                  |\n| 41 | antismash_db    | antismash      | candidates   | region_id         | INTEGER     |                  |\n| 42 | antismash_db    | antismash      | candidates   | LOCATION          | VARCHAR     |                  |\n| 43 | antismash_db    | antismash      | candidates   | candidate_type_id | INTEGER     |                  |\n| 44 | antismash_db    | antismash      | candidates   | smiles            | VARCHAR     |                  |\n| 45 | antismash_db    | antismash      | candidates   | polymer           | VARCHAR     |                  |\n\nThe following columns are in the binding_sites table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 34 | antismash_db    | antismash      | binding_sites | binding_site_id | INTEGER     |                  |\n| 35 | antismash_db    | antismash      | binding_sites | regulator_id    | INTEGER     |                  |\n| 36 | antismash_db    | antismash      | binding_sites | region_id       | INTEGER     |                  |\n| 37 | antismash_db    | antismash      | binding_sites | score           | FLOAT       |                  |\n| 38 | antismash_db    | antismash      | binding_sites | START           | INTEGER     |                  |\n| 39 | antismash_db    | antismash      | binding_sites | confidence_id   | INTEGER     |                  |\n\nThe following columns are in the modules table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 118 | antismash_db    | antismash      | modules      | module_id     | INTEGER     |                  |\n| 119 | antismash_db    | antismash      | modules      | LOCATION      | VARCHAR     |                  |\n| 120 | antismash_db    | antismash      | modules      | TYPE          | VARCHAR     |                  |\n| 121 | antismash_db    | antismash      | modules      | trans_at      | BOOLEAN     |                  |\n| 122 | antismash_db    | antismash      | modules      | complete      | BOOLEAN     |                  |\n| 123 | antismash_db    | antismash      | modules      | iterative     | BOOLEAN     |                  |\n| 124 | antismash_db    | antismash      | modules      | multi_gene    | BOOLEAN     |                  |\n| 125 | antismash_db    | antismash      | modules      | region_id     | INTEGER     |                  |\n\nThe following columns are in the module_domain_functions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name              | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------------|:--------------|:------------|:-----------------|\n| 126 | antismash_db    | antismash      | module_domain_functions | function_id   | INTEGER     |                  |\n| 127 | antismash_db    | antismash      | module_domain_functions | FUNCTION      | VARCHAR     |                  |\n\nThe following columns are in the cluster_compare_hits table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name           | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:---------------------|:--------------------|:------------|:-----------------|\n| 66 | antismash_db    | antismash      | cluster_compare_hits | hit_id              | INTEGER     |                  |\n| 67 | antismash_db    | antismash      | cluster_compare_hits | region_id           | INTEGER     |                  |\n| 68 | antismash_db    | antismash      | cluster_compare_hits | protocluster_id     | INTEGER     |                  |\n| 69 | antismash_db    | antismash      | cluster_compare_hits | reference_accession | VARCHAR     |                  |\n| 70 | antismash_db    | antismash      | cluster_compare_hits | description         | VARCHAR     |                  |\n| 71 | antismash_db    | antismash      | cluster_compare_hits | score               | FLOAT       |                  |\n| 72 | antismash_db    | antismash      | cluster_compare_hits | identity_metric     | FLOAT       |                  |\n| 73 | antismash_db    | antismash      | cluster_compare_hits | order_metric        | FLOAT       |                  |\n| 74 | antismash_db    | antismash      | cluster_compare_hits | components_metric   | FLOAT       |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Which regions has iterative modules?"}, {"role": "assistant", "content": "SELECT r.*, m.* FROM antismash.regions r JOIN antismash.modules m ON r.region_id = m.region_id WHERE m.iterative = TRUE;"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Find all lanthipeptide BGC type regions."}, {"role": "assistant", "content": "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "What are the genes located in a region_id 1?"}, {"role": "assistant", "content": "SELECT * FROM antismash.cdss WHERE region_id = 1;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Which regions has iterative modules? For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:31,514 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:31,516 - ERROR - Failed to process question 25: Which regions has iterative modules?. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:31,516 - INFO - ---DONE---
2024-08-15 12:27:31,516 - INFO - Processing question 26: Describe all the CDS located in region 8 of the genome NBC_01571.
2024-08-15 12:27:31,557 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:31.51396169Z', 'message': {'role': 'assistant', 'content': "```sql\nSELECT DISTINCT LOCATION FROM antismash_modules WHERE TYPE = 'iterative';\n```"}, 'done_reason': 'stop', 'done': True, 'total_duration': 799621130, 'load_duration': 23858091, 'prompt_eval_count': 1026, 'prompt_eval_duration': 406964000, 'eval_count': 20, 'eval_duration': 243305000}
LLM Response: ```sql
SELECT DISTINCT LOCATION FROM antismash_modules WHERE TYPE = 'iterative';
```
Info: Output from LLM: ```sql
SELECT DISTINCT LOCATION FROM antismash_modules WHERE TYPE = 'iterative';
``` 
Extracted SQL: SELECT DISTINCT LOCATION FROM antismash_modules WHERE TYPE = 'iterative'
SELECT DISTINCT LOCATION FROM antismash_modules WHERE TYPE = 'iterative'
Couldn't run sql:  Catalog Error: Table with name antismash_modules does not exist!
Did you mean "antismash.modules"?
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the cdss table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 48 | antismash_db    | antismash      | cdss         | cds_id              | INTEGER     |                  |\n| 49 | antismash_db    | antismash      | cdss         | functional_class_id | INTEGER     |                  |\n| 50 | antismash_db    | antismash      | cdss         | locus_tag           | VARCHAR     |                  |\n| 51 | antismash_db    | antismash      | cdss         | name                | VARCHAR     |                  |\n| 52 | antismash_db    | antismash      | cdss         | product             | VARCHAR     |                  |\n| 53 | antismash_db    | antismash      | cdss         | protein_id          | VARCHAR     |                  |\n| 54 | antismash_db    | antismash      | cdss         | TRANSLATION         | VARCHAR     |                  |\n| 55 | antismash_db    | antismash      | cdss         | LOCATION            | VARCHAR     |                  |\n| 56 | antismash_db    | antismash      | cdss         | region_id           | INTEGER     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the rel_cds_protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name            | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------------|:----------------|:------------|:-----------------|\n| 191 | antismash_db    | antismash      | rel_cds_protoclusters | protocluster_id | INTEGER     |                  |\n| 192 | antismash_db    | antismash      | rel_cds_protoclusters | cds_id          | INTEGER     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the rel_cds_candidates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 189 | antismash_db    | antismash      | rel_cds_candidates | candidate_id  | INTEGER     |                  |\n| 190 | antismash_db    | antismash      | rel_cds_candidates | cds_id        | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'What are the genes located in a region_id 1?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.cdss WHERE region_id = 1;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'Which CDSs are located in a specific region and what are their details?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.cdss WHERE region_id = 1;'}, {'role': 'user', 'content': 'Summarize the genus distribution in the antiSMASH dataset.'}, {'role': 'assistant', 'content': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;'}, {'role': 'user', 'content': 'Which genome has the longest DNA sequence?'}, {'role': 'assistant', 'content': 'SELECT g.*, LENGTH(d.dna) as dna_length FROM antismash.genomes g JOIN antismash.dna_sequences d ON g.genome_id = d.genome_id ORDER BY LENGTH(d.dna) DESC LIMIT 1;'}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571. For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the cdss table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 48 | antismash_db    | antismash      | cdss         | cds_id              | INTEGER     |                  |\n| 49 | antismash_db    | antismash      | cdss         | functional_class_id | INTEGER     |                  |\n| 50 | antismash_db    | antismash      | cdss         | locus_tag           | VARCHAR     |                  |\n| 51 | antismash_db    | antismash      | cdss         | name                | VARCHAR     |                  |\n| 52 | antismash_db    | antismash      | cdss         | product             | VARCHAR     |                  |\n| 53 | antismash_db    | antismash      | cdss         | protein_id          | VARCHAR     |                  |\n| 54 | antismash_db    | antismash      | cdss         | TRANSLATION         | VARCHAR     |                  |\n| 55 | antismash_db    | antismash      | cdss         | LOCATION            | VARCHAR     |                  |\n| 56 | antismash_db    | antismash      | cdss         | region_id           | INTEGER     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the rel_cds_protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name            | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:----------------------|:----------------|:------------|:-----------------|\n| 191 | antismash_db    | antismash      | rel_cds_protoclusters | protocluster_id | INTEGER     |                  |\n| 192 | antismash_db    | antismash      | rel_cds_protoclusters | cds_id          | INTEGER     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the rel_cds_candidates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name         | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------------|:--------------|:------------|:-----------------|\n| 189 | antismash_db    | antismash      | rel_cds_candidates | candidate_id  | INTEGER     |                  |\n| 190 | antismash_db    | antismash      | rel_cds_candidates | cds_id        | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "What are the genes located in a region_id 1?"}, {"role": "assistant", "content": "SELECT * FROM antismash.cdss WHERE region_id = 1;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "Which CDSs are located in a specific region and what are their details?"}, {"role": "assistant", "content": "SELECT * FROM antismash.cdss WHERE region_id = 1;"}, {"role": "user", "content": "Summarize the genus distribution in the antiSMASH dataset."}, {"role": "assistant", "content": "SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;"}, {"role": "user", "content": "Which genome has the longest DNA sequence?"}, {"role": "assistant", "content": "SELECT g.*, LENGTH(d.dna) as dna_length FROM antismash.genomes g JOIN antismash.dna_sequences d ON g.genome_id = d.genome_id ORDER BY LENGTH(d.dna) DESC LIMIT 1;"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:32,852 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:32,854 - ERROR - Failed to process question 26: Describe all the CDS located in region 8 of the genome NBC_01571.. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:32,854 - INFO - ---DONE---
2024-08-15 12:27:32,854 - INFO - Processing question 28: Find all NRPS regions with both glycosyltransferase halogenase SMCOGs 
2024-08-15 12:27:32,895 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:32.852124911Z', 'message': {'role': 'assistant', 'content': "SELECT t2.accession FROM antismash_rel_regions_types AS t1 INNER JOIN antismash_regions AS t2 ON t1.region_id = t2.region_id WHERE t1.bgc_type_id = 8 AND t2.accession LIKE 'NBC_01571%'"}, 'done_reason': 'stop', 'done': True, 'total_duration': 1269823552, 'load_duration': 24089584, 'prompt_eval_count': 1026, 'prompt_eval_duration': 410001000, 'eval_count': 57, 'eval_duration': 714662000}
LLM Response: SELECT t2.accession FROM antismash_rel_regions_types AS t1 INNER JOIN antismash_regions AS t2 ON t1.region_id = t2.region_id WHERE t1.bgc_type_id = 8 AND t2.accession LIKE 'NBC_01571%'
SELECT t2.accession FROM antismash_rel_regions_types AS t1 INNER JOIN antismash_regions AS t2 ON t1.region_id = t2.region_id WHERE t1.bgc_type_id = 8 AND t2.accession LIKE 'NBC_01571%'
Couldn't run sql:  Catalog Error: Table with name antismash_rel_regions_types does not exist!
Did you mean "antismash.rel_regions_types"?
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the regulators table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 172 | antismash_db    | antismash      | regulators   | regulator_id  | INTEGER     |                  |\n| 173 | antismash_db    | antismash      | regulators   | name          | VARCHAR     |                  |\n| 174 | antismash_db    | antismash      | regulators   | description   | VARCHAR     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'Find all lanthipeptide BGC type regions.'}, {'role': 'assistant', 'content': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'How many Streptomyces genomes are in the dataset?'}, {'role': 'assistant', 'content': "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {'role': 'user', 'content': 'Summarize all taxa of the genomes and their details.'}, {'role': 'assistant', 'content': 'SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs  For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the ripps table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name         | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------------|:------------|:-----------------|\n| 207 | antismash_db    | antismash      | ripps        | protocluster_id     | INTEGER     |                  |\n| 208 | antismash_db    | antismash      | ripps        | peptide_sequence    | VARCHAR     |                  |\n| 209 | antismash_db    | antismash      | ripps        | molecular_weight    | FLOAT       |                  |\n| 210 | antismash_db    | antismash      | ripps        | monoisotopic_mass   | FLOAT       |                  |\n| 211 | antismash_db    | antismash      | ripps        | alternative_weights | VARCHAR     |                  |\n| 212 | antismash_db    | antismash      | ripps        | bridges             | INTEGER     |                  |\n| 213 | antismash_db    | antismash      | ripps        | CLASS               | VARCHAR     |                  |\n| 214 | antismash_db    | antismash      | ripps        | subclass            | VARCHAR     |                  |\n| 215 | antismash_db    | antismash      | ripps        | score               | DOUBLE      |                  |\n| 216 | antismash_db    | antismash      | ripps        | locus_tag           | VARCHAR     |                  |\n| 217 | antismash_db    | antismash      | ripps        | cds_id              | INTEGER     |                  |\n\nThe following columns are in the regulators table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 172 | antismash_db    | antismash      | regulators   | regulator_id  | INTEGER     |                  |\n| 173 | antismash_db    | antismash      | regulators   | name          | VARCHAR     |                  |\n| 174 | antismash_db    | antismash      | regulators   | description   | VARCHAR     |                  |\n\nThe following columns are in the substrates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 236 | antismash_db    | antismash      | substrates   | substrate_id  | INTEGER     |                  |\n| 237 | antismash_db    | antismash      | substrates   | name          | VARCHAR     |                  |\n| 238 | antismash_db    | antismash      | substrates   | description   | VARCHAR     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "Find all lanthipeptide BGC type regions."}, {"role": "assistant", "content": "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "How many Streptomyces genomes are in the dataset?"}, {"role": "assistant", "content": "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {"role": "user", "content": "Summarize all taxa of the genomes and their details."}, {"role": "assistant", "content": "SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs  For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:34,612 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:34,614 - ERROR - Failed to process question 28: Find all NRPS regions with both glycosyltransferase halogenase SMCOGs . Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:34,614 - INFO - ---DONE---
2024-08-15 12:27:34,614 - INFO - Processing question 33: List all PKS regions in genome NBC_01737.
2024-08-15 12:27:34,658 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:34.611939098Z', 'message': {'role': 'assistant', 'content': "SELECT T1.name AS region_name, T2.name AS enzyme_type\nFROM antismash.regions T1\nJOIN antismash.enzyme_types T2 ON T1.best_mibig_hit_acc = T2.name\nWHERE T2.name IN ('glycosyltransferase', 'halogenase') AND T1.name IN (SELECT location FROM antismash.cogs WHERE sm_cog IN (10, 11))"}, 'done_reason': 'stop', 'done': True, 'total_duration': 1696158379, 'load_duration': 27232191, 'prompt_eval_count': 1026, 'prompt_eval_duration': 408644000, 'eval_count': 91, 'eval_duration': 1143249000}
LLM Response: SELECT T1.name AS region_name, T2.name AS enzyme_type
FROM antismash.regions T1
JOIN antismash.enzyme_types T2 ON T1.best_mibig_hit_acc = T2.name
WHERE T2.name IN ('glycosyltransferase', 'halogenase') AND T1.name IN (SELECT location FROM antismash.cogs WHERE sm_cog IN (10, 11))
SELECT T1.name AS region_name, T2.name AS enzyme_type
FROM antismash.regions T1
JOIN antismash.enzyme_types T2 ON T1.best_mibig_hit_acc = T2.name
WHERE T2.name IN ('glycosyltransferase', 'halogenase') AND T1.name IN (SELECT location FROM antismash.cogs WHERE sm_cog IN (10, 11))
Couldn't run sql:  Catalog Error: Table with name enzyme_types does not exist!
Did you mean "bgc_types"?
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs '}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {'role': 'user', 'content': 'How many Streptomyces genomes are in the dataset?'}, {'role': 'assistant', 'content': "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {'role': 'user', 'content': 'Summarize all taxa of the genomes and their details.'}, {'role': 'assistant', 'content': 'SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;'}, {'role': 'user', 'content': 'What are the genes located in a region_id 1?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.cdss WHERE region_id = 1;'}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737. For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the genomes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 110 | antismash_db    | antismash      | genomes      | genome_id     | INTEGER     |                  |\n| 111 | antismash_db    | antismash      | genomes      | tax_id        | INTEGER     |                  |\n| 112 | antismash_db    | antismash      | genomes      | bio_project   | VARCHAR     |                  |\n| 113 | antismash_db    | antismash      | genomes      | bio_sample    | VARCHAR     |                  |\n| 114 | antismash_db    | antismash      | genomes      | isolate_id    | INTEGER     |                  |\n| 115 | antismash_db    | antismash      | genomes      | assembly_id   | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the dna_sequences table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 89 | antismash_db    | antismash      | dna_sequences | dna             | VARCHAR     |                  |\n| 90 | antismash_db    | antismash      | dna_sequences | md5             | VARCHAR     |                  |\n| 91 | antismash_db    | antismash      | dna_sequences | accession       | VARCHAR     |                  |\n| 92 | antismash_db    | antismash      | dna_sequences | definition      | VARCHAR     |                  |\n| 93 | antismash_db    | antismash      | dna_sequences | contig_type     | INTEGER     |                  |\n| 94 | antismash_db    | antismash      | dna_sequences | chromosome_type | INTEGER     |                  |\n| 95 | antismash_db    | antismash      | dna_sequences | record_number   | INTEGER     |                  |\n| 96 | antismash_db    | antismash      | dna_sequences | VERSION         | INTEGER     |                  |\n| 97 | antismash_db    | antismash      | dna_sequences | genome_id       | INTEGER     |                  |\n\nThe following columns are in the sequence_gc_content table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name          | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------------|:--------------|:------------|:-----------------|\n| 223 | antismash_db    | antismash      | sequence_gc_content | accession     | VARCHAR     |                  |\n| 224 | antismash_db    | antismash      | sequence_gc_content | gc_content    | DOUBLE      |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the sequence_lengths table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:--------------|:------------|:-----------------|\n| 225 | antismash_db    | antismash      | sequence_lengths | accession     | VARCHAR     |                  |\n| 226 | antismash_db    | antismash      | sequence_lengths | seq_length    | BIGINT      |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the protoclusters table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 158 | antismash_db    | antismash      | protoclusters | protocluster_id | INTEGER     |                  |\n| 159 | antismash_db    | antismash      | protoclusters | region_id       | INTEGER     |                  |\n| 160 | antismash_db    | antismash      | protoclusters | LOCATION        | VARCHAR     |                  |\n| 161 | antismash_db    | antismash      | protoclusters | bgc_type_id     | INTEGER     |                  |\n\nThe following columns are in the isolates table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 116 | antismash_db    | antismash      | isolates     | isolate_id    | INTEGER     |                  |\n| 117 | antismash_db    | antismash      | isolates     | sample_id     | INTEGER     |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Find all NRPS regions with both glycosyltransferase halogenase SMCOGs "}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';"}, {"role": "user", "content": "How many Streptomyces genomes are in the dataset?"}, {"role": "assistant", "content": "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';"}, {"role": "user", "content": "Summarize all taxa of the genomes and their details."}, {"role": "assistant", "content": "SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;"}, {"role": "user", "content": "What are the genes located in a region_id 1?"}, {"role": "assistant", "content": "SELECT * FROM antismash.cdss WHERE region_id = 1;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737. For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:36,056 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:36,057 - ERROR - Failed to process question 33: List all PKS regions in genome NBC_01737.. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:36,057 - INFO - ---DONE---
2024-08-15 12:27:36,058 - INFO - Processing question 34: Which PKS regions has trans_at modules?
2024-08-15 12:27:36,099 - WARNING - Number of requested results 10 is greater than number of elements in index 1, updating n_results = 1

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:36.055783618Z', 'message': {'role': 'assistant', 'content': 'SELECT DISTINCT T2.accession \nFROM antismash.regions AS T1 \nINNER JOIN antismash.sequence_lengths AS T2 \nON T1.accession = T2.accession \nWHERE T1.region_type IN ( SELECT region_id FROM antismash.rel_regions_types WHERE bgc_type_id = 6 );'}, 'done_reason': 'stop', 'done': True, 'total_duration': 1363951292, 'load_duration': 24274474, 'prompt_eval_count': 1026, 'prompt_eval_duration': 405901000, 'eval_count': 66, 'eval_duration': 818437000}
LLM Response: SELECT DISTINCT T2.accession 
FROM antismash.regions AS T1 
INNER JOIN antismash.sequence_lengths AS T2 
ON T1.accession = T2.accession 
WHERE T1.region_type IN ( SELECT region_id FROM antismash.rel_regions_types WHERE bgc_type_id = 6 );
Info: Output from LLM: SELECT DISTINCT T2.accession 
FROM antismash.regions AS T1 
INNER JOIN antismash.sequence_lengths AS T2 
ON T1.accession = T2.accession 
WHERE T1.region_type IN ( SELECT region_id FROM antismash.rel_regions_types WHERE bgc_type_id = 6 ); 
Extracted SQL: SELECT DISTINCT T2.accession 
FROM antismash.regions AS T1 
INNER JOIN antismash.sequence_lengths AS T2 
ON T1.accession = T2.accession 
WHERE T1.region_type IN ( SELECT region_id FROM antismash.rel_regions_types WHERE bgc_type_id = 6 )
SELECT DISTINCT T2.accession 
FROM antismash.regions AS T1 
INNER JOIN antismash.sequence_lengths AS T2 
ON T1.accession = T2.accession 
WHERE T1.region_type IN ( SELECT region_id FROM antismash.rel_regions_types WHERE bgc_type_id = 6 )
Couldn't run sql:  Binder Error: Table "T1" does not have a column named "region_type"
SQL Prompt: [{'role': 'system', 'content': 'You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domain_profiles_as_domain_profile_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidate_types_candidate_type_id_seq\')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_algorithms_algorithm_id_seq\')), "name" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval(\'antismash.antismash_functional_classes_functional_class_id_seq\')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval(\'antismash.antismash_gene_ontologies_go_id_seq\')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval(\'antismash.antismash_module_domain_functions_function_id_seq\')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);\nCREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulators_regulator_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval(\'antismash.antismash_regulator_confidence_confidence_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfams_resfam_id_seq\')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval(\'antismash.antismash_sampling_sites_site_id_seq\')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval(\'antismash.antismash_substrates_substrate_id_seq\')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_profiles_profile_id_seq\')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval(\'antismash.antismash_taxa_tax_id_seq\')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_types_bgc_type_id_seq\')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval(\'antismash.antismash_monomers_monomer_id_seq\')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval(\'antismash.antismash_samples_sample_id_seq\')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval(\'antismash.antismash_smcogs_smcog_id_seq\')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval(\'antismash.antismash_bgc_rules_bgc_rule_id_seq\')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval(\'antismash.antismash_isolates_isolate_id_seq\')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval(\'antismash.antismash_genomes_genome_id_seq\')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval(\'antismash.antismash_regions_region_id_seq\')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval(\'antismash.antismash_tta_codons_tta_codon_id_seq\')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval(\'antismash.antismash_binding_sites_binding_site_id_seq\')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval(\'antismash.antismash_candidates_candidate_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval(\'antismash.antismash_cdss_cds_id_seq\')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq\')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq\')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_comparippson_hits_comparippson_hit_id_seq\')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval(\'antismash.antismash_genes_gene_id_seq\')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval(\'antismash.antismash_modules_module_id_seq\')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_pfam_domains_pfam_domain_id_seq\')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_profile_hits_profile_hit_id_seq\')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval(\'antismash.antismash_protoclusters_protocluster_id_seq\')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_resfam_domains_resfam_domain_id_seq\')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_t2pks_id_seq\')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_cds_domain_domain_id_seq\')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starters_domain_id_seq\')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval(\'antismash.antismash_t2pks_starter_elongation_combo_id_seq\')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq\')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval(\'antismash.antismash_as_domains_as_domain_id_seq\')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval(\'antismash.antismash_cluster_compare_hits_hit_id_seq\')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, \'G\', \'\'))) + length(dna)) - length(replace(dna, \'C\', \'\')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the modules table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 118 | antismash_db    | antismash      | modules      | module_id     | INTEGER     |                  |\n| 119 | antismash_db    | antismash      | modules      | LOCATION      | VARCHAR     |                  |\n| 120 | antismash_db    | antismash      | modules      | TYPE          | VARCHAR     |                  |\n| 121 | antismash_db    | antismash      | modules      | trans_at      | BOOLEAN     |                  |\n| 122 | antismash_db    | antismash      | modules      | complete      | BOOLEAN     |                  |\n| 123 | antismash_db    | antismash      | modules      | iterative     | BOOLEAN     |                  |\n| 124 | antismash_db    | antismash      | modules      | multi_gene    | BOOLEAN     |                  |\n| 125 | antismash_db    | antismash      | modules      | region_id     | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the module_domain_functions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name              | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------------|:--------------|:------------|:-----------------|\n| 126 | antismash_db    | antismash      | module_domain_functions | function_id   | INTEGER     |                  |\n| 127 | antismash_db    | antismash      | module_domain_functions | FUNCTION      | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the t2pks_cds_domain table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name      | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:-----------------|:------------|:-----------------|\n| 241 | antismash_db    | antismash      | t2pks_cds_domain | domain_id        | INTEGER     |                  |\n| 242 | antismash_db    | antismash      | t2pks_cds_domain | t2pks_id         | INTEGER     |                  |\n| 243 | antismash_db    | antismash      | t2pks_cds_domain | cds_id           | INTEGER     |                  |\n| 244 | antismash_db    | antismash      | t2pks_cds_domain | profile_id       | INTEGER     |                  |\n| 245 | antismash_db    | antismash      | t2pks_cds_domain | protein_type     | VARCHAR     |                  |\n| 246 | antismash_db    | antismash      | t2pks_cds_domain | protein_function | VARCHAR     |                  |\n| 247 | antismash_db    | antismash      | t2pks_cds_domain | evalue           | DOUBLE      |                  |\n| 248 | antismash_db    | antismash      | t2pks_cds_domain | bitscore         | DOUBLE      |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the t2pks table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 239 | antismash_db    | antismash      | t2pks        | t2pks_id        | INTEGER     |                  |\n| 240 | antismash_db    | antismash      | t2pks        | protocluster_id | INTEGER     |                  |\n\nThe following columns are in the pfam_domains table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name    | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------|:------------|:-----------------|\n| 137 | antismash_db    | antismash      | pfam_domains | pfam_domain_id | INTEGER     |                  |\n| 138 | antismash_db    | antismash      | pfam_domains | DATABASE       | VARCHAR     |                  |\n| 139 | antismash_db    | antismash      | pfam_domains | detection      | VARCHAR     |                  |\n| 140 | antismash_db    | antismash      | pfam_domains | score          | DOUBLE      |                  |\n| 141 | antismash_db    | antismash      | pfam_domains | evalue         | DOUBLE      |                  |\n| 142 | antismash_db    | antismash      | pfam_domains | TRANSLATION    | VARCHAR     |                  |\n| 143 | antismash_db    | antismash      | pfam_domains | pfam_id        | VARCHAR     |                  |\n| 144 | antismash_db    | antismash      | pfam_domains | LOCATION       | VARCHAR     |                  |\n| 145 | antismash_db    | antismash      | pfam_domains | cds_id         | INTEGER     |                  |\n\nThe following columns are in the binding_sites table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 34 | antismash_db    | antismash      | binding_sites | binding_site_id | INTEGER     |                  |\n| 35 | antismash_db    | antismash      | binding_sites | regulator_id    | INTEGER     |                  |\n| 36 | antismash_db    | antismash      | binding_sites | region_id       | INTEGER     |                  |\n| 37 | antismash_db    | antismash      | binding_sites | score           | FLOAT       |                  |\n| 38 | antismash_db    | antismash      | binding_sites | START           | INTEGER     |                  |\n| 39 | antismash_db    | antismash      | binding_sites | confidence_id   | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can\'t be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n'}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules?'}, {'role': 'assistant', 'content': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {'role': 'user', 'content': 'List all PKS regions in genome NBC_01737.'}, {'role': 'assistant', 'content': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {'role': 'user', 'content': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate'}, {'role': 'assistant', 'content': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {'role': 'user', 'content': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {'role': 'assistant', 'content': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {'role': 'user', 'content': 'Find all lanthipeptide BGC type regions.'}, {'role': 'assistant', 'content': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {'role': 'user', 'content': 'Which regions has iterative modules?'}, {'role': 'assistant', 'content': 'SELECT r.*, m.* FROM antismash.regions r JOIN antismash.modules m ON r.region_id = m.region_id WHERE m.iterative = TRUE;'}, {'role': 'user', 'content': 'List all pfam domains located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;'}, {'role': 'user', 'content': 'Get me all RIPPs precursor peptide for thiopeptide type II'}, {'role': 'assistant', 'content': "SELECT   * FROM   antismash.ripps ripps   JOIN antismash.protoclusters p ON ripps.protocluster_id = p.protocluster_id   JOIN antismash.regions r ON r.region_id = p.region_id WHERE   ripps.class ILIKE '%thiopeptide%'   AND ripps.subclass ILIKE '%type III%';"}, {'role': 'user', 'content': 'Describe all the CDS located in region 8 of the genome NBC_01571.'}, {'role': 'assistant', 'content': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {'role': 'user', 'content': 'What are the genes located in a region_id 1?'}, {'role': 'assistant', 'content': 'SELECT * FROM antismash.cdss WHERE region_id = 1;'}, {'role': 'user', 'content': 'Which PKS regions has trans_at modules? For generating the SQL query, make sure to use antismash. as the prefix before the table name.'}]
Info: Ollama parameters:
model=llama3.1:8b,
options={},
keep_alive=None
Info: Prompt Content:
[{"role": "system", "content": "You are a DuckDB SQL expert. Please help to generate a SQL query to answer the question. Your response should ONLY be based on the given context and follow the response guidelines and format instructions. \n===Tables \nCREATE SCHEMA antismash;\n\n\nCREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\nCREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;\n\nCREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, \"DATABASE\" VARCHAR NOT NULL, \"TYPE\" VARCHAR, PRIMARY KEY(as_domain_profile_id));\nCREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);\nCREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);\nCREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);\nCREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), \"name\" VARCHAR, PRIMARY KEY(algorithm_id));\nCREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);\nCREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));\nCREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), \"name\" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );\nCREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, \"FUNCTION\" VARCHAR NOT NULL);\nCREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, \"VERSION\" INTEGER);\nCREATE TABLE antismash.profiles(\"name\" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY(\"name\"));\nCREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE(\"name\"));\nCREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL);\nCREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));\nCREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), \"name\" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));\nCREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, \"name\" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);\nCREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, \"CLASS\" VARCHAR, taxonomic_order VARCHAR, \"family\" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, \"name\" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);\nCREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));\nCREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE(\"name\"));\nCREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));\nCREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, \"TIME\" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));\nCREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), \"name\" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), \"RULE\" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));\nCREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));\nCREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, \"VERSION\" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));\nCREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));\nCREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, \"LOCATION\" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));\nCREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, \"START\" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));\nCREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));\nCREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, \"name\" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));\nCREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));\nCREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, \"LOCATION\" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));\nCREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), \"LOCATION\" VARCHAR NOT NULL, \"TYPE\" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));\nCREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));\nCREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, \"name\" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (\"name\") REFERENCES antismash.profiles(\"name\"));\nCREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, \"LOCATION\" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));\nCREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));\nCREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));\nCREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));\nCREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));\nCREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, \"CLASS\" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));\nCREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));\nCREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));\nCREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));\nCREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, \"name\" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));\nCREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));\nCREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, \"DATABASE\" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, \"LOCATION\" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, \"LOCATION\" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));\nCREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));\nCREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));\n\nCREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;\nCREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;\n\nCREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);\nCREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);\nCREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);\nCREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);\nCREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);\nCREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);\nCREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);\nCREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);\nCREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);\nCREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);\nCREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);\nCREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);\n\n\n\n===Additional Context \n\nThe following columns are in the modules table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 118 | antismash_db    | antismash      | modules      | module_id     | INTEGER     |                  |\n| 119 | antismash_db    | antismash      | modules      | LOCATION      | VARCHAR     |                  |\n| 120 | antismash_db    | antismash      | modules      | TYPE          | VARCHAR     |                  |\n| 121 | antismash_db    | antismash      | modules      | trans_at      | BOOLEAN     |                  |\n| 122 | antismash_db    | antismash      | modules      | complete      | BOOLEAN     |                  |\n| 123 | antismash_db    | antismash      | modules      | iterative     | BOOLEAN     |                  |\n| 124 | antismash_db    | antismash      | modules      | multi_gene    | BOOLEAN     |                  |\n| 125 | antismash_db    | antismash      | modules      | region_id     | INTEGER     |                  |\n\nThe following columns are in the rel_regions_types table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name        | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------|:--------------|:------------|:-----------------|\n| 196 | antismash_db    | antismash      | rel_regions_types | region_id     | INTEGER     |                  |\n| 197 | antismash_db    | antismash      | rel_regions_types | bgc_type_id   | INTEGER     |                  |\n\nThe following columns are in the regions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name                | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------------------|:------------|:-----------------|\n| 162 | antismash_db    | antismash      | regions      | region_id                  | INTEGER     |                  |\n| 163 | antismash_db    | antismash      | regions      | accession                  | VARCHAR     |                  |\n| 164 | antismash_db    | antismash      | regions      | region_number              | INTEGER     |                  |\n| 165 | antismash_db    | antismash      | regions      | LOCATION                   | VARCHAR     |                  |\n| 166 | antismash_db    | antismash      | regions      | start_pos                  | INTEGER     |                  |\n| 167 | antismash_db    | antismash      | regions      | end_pos                    | INTEGER     |                  |\n| 168 | antismash_db    | antismash      | regions      | contig_edge                | BOOLEAN     |                  |\n| 169 | antismash_db    | antismash      | regions      | best_mibig_hit_acc         | VARCHAR     |                  |\n| 170 | antismash_db    | antismash      | regions      | best_mibig_hit_description | VARCHAR     |                  |\n| 171 | antismash_db    | antismash      | regions      | best_mibig_hit_similarity  | INTEGER     |                  |\n\nThe following columns are in the module_domain_functions table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name              | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:------------------------|:--------------|:------------|:-----------------|\n| 126 | antismash_db    | antismash      | module_domain_functions | function_id   | INTEGER     |                  |\n| 127 | antismash_db    | antismash      | module_domain_functions | FUNCTION      | VARCHAR     |                  |\n\nThe following columns are in the genes table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 103 | antismash_db    | antismash      | genes        | gene_id       | INTEGER     |                  |\n| 104 | antismash_db    | antismash      | genes        | locus_tag     | VARCHAR     |                  |\n| 105 | antismash_db    | antismash      | genes        | LOCATION      | VARCHAR     |                  |\n| 106 | antismash_db    | antismash      | genes        | region_id     | INTEGER     |                  |\n\nThe following columns are in the t2pks_cds_domain table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name       | column_name      | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-----------------|:-----------------|:------------|:-----------------|\n| 241 | antismash_db    | antismash      | t2pks_cds_domain | domain_id        | INTEGER     |                  |\n| 242 | antismash_db    | antismash      | t2pks_cds_domain | t2pks_id         | INTEGER     |                  |\n| 243 | antismash_db    | antismash      | t2pks_cds_domain | cds_id           | INTEGER     |                  |\n| 244 | antismash_db    | antismash      | t2pks_cds_domain | profile_id       | INTEGER     |                  |\n| 245 | antismash_db    | antismash      | t2pks_cds_domain | protein_type     | VARCHAR     |                  |\n| 246 | antismash_db    | antismash      | t2pks_cds_domain | protein_function | VARCHAR     |                  |\n| 247 | antismash_db    | antismash      | t2pks_cds_domain | evalue           | DOUBLE      |                  |\n| 248 | antismash_db    | antismash      | t2pks_cds_domain | bitscore         | DOUBLE      |                  |\n\nThe following columns are in the tta_codons table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name   | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:--------------|:------------|:-----------------|\n| 290 | antismash_db    | antismash      | tta_codons   | tta_codon_id  | INTEGER     |                  |\n| 291 | antismash_db    | antismash      | tta_codons   | seq_id        | VARCHAR     |                  |\n| 292 | antismash_db    | antismash      | tta_codons   | LOCATION      | VARCHAR     |                  |\n\nThe following columns are in the t2pks table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name     | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:----------------|:------------|:-----------------|\n| 239 | antismash_db    | antismash      | t2pks        | t2pks_id        | INTEGER     |                  |\n| 240 | antismash_db    | antismash      | t2pks        | protocluster_id | INTEGER     |                  |\n\nThe following columns are in the pfam_domains table in the antismash_db database:\n\n|     | table_catalog   | table_schema   | table_name   | column_name    | data_type   | COLUMN_COMMENT   |\n|----:|:----------------|:---------------|:-------------|:---------------|:------------|:-----------------|\n| 137 | antismash_db    | antismash      | pfam_domains | pfam_domain_id | INTEGER     |                  |\n| 138 | antismash_db    | antismash      | pfam_domains | DATABASE       | VARCHAR     |                  |\n| 139 | antismash_db    | antismash      | pfam_domains | detection      | VARCHAR     |                  |\n| 140 | antismash_db    | antismash      | pfam_domains | score          | DOUBLE      |                  |\n| 141 | antismash_db    | antismash      | pfam_domains | evalue         | DOUBLE      |                  |\n| 142 | antismash_db    | antismash      | pfam_domains | TRANSLATION    | VARCHAR     |                  |\n| 143 | antismash_db    | antismash      | pfam_domains | pfam_id        | VARCHAR     |                  |\n| 144 | antismash_db    | antismash      | pfam_domains | LOCATION       | VARCHAR     |                  |\n| 145 | antismash_db    | antismash      | pfam_domains | cds_id         | INTEGER     |                  |\n\nThe following columns are in the binding_sites table in the antismash_db database:\n\n|    | table_catalog   | table_schema   | table_name    | column_name     | data_type   | COLUMN_COMMENT   |\n|---:|:----------------|:---------------|:--------------|:----------------|:------------|:-----------------|\n| 34 | antismash_db    | antismash      | binding_sites | binding_site_id | INTEGER     |                  |\n| 35 | antismash_db    | antismash      | binding_sites | regulator_id    | INTEGER     |                  |\n| 36 | antismash_db    | antismash      | binding_sites | region_id       | INTEGER     |                  |\n| 37 | antismash_db    | antismash      | binding_sites | score           | FLOAT       |                  |\n| 38 | antismash_db    | antismash      | binding_sites | START           | INTEGER     |                  |\n| 39 | antismash_db    | antismash      | binding_sites | confidence_id   | INTEGER     |                  |\n\n===Response Guidelines \n1. If the provided context is sufficient, please generate a valid SQL query without any explanations for the question. \n2. If the provided context is almost sufficient but requires knowledge of a specific string in a particular column, please generate an intermediate SQL query to find the distinct strings in that column. Prepend the query with a comment saying intermediate_sql \n3. If the provided context is insufficient, please explain why it can't be generated. \n4. Please use the most relevant table(s). \n5. If the question has been asked and answered before, please repeat the answer exactly as it was given before. \n6. Ensure that the output SQL is DuckDB SQL-compliant and executable, and free of syntax errors. \n"}, {"role": "user", "content": "Which PKS regions has trans_at modules?"}, {"role": "assistant", "content": "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;"}, {"role": "user", "content": "List all PKS regions in genome NBC_01737."}, {"role": "assistant", "content": "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';"}, {"role": "user", "content": "Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate"}, {"role": "assistant", "content": "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';"}, {"role": "user", "content": "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'."}, {"role": "assistant", "content": "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';"}, {"role": "user", "content": "Find all lanthipeptide BGC type regions."}, {"role": "assistant", "content": "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';"}, {"role": "user", "content": "Which regions has iterative modules?"}, {"role": "assistant", "content": "SELECT r.*, m.* FROM antismash.regions r JOIN antismash.modules m ON r.region_id = m.region_id WHERE m.iterative = TRUE;"}, {"role": "user", "content": "List all pfam domains located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;"}, {"role": "user", "content": "Get me all RIPPs precursor peptide for thiopeptide type II"}, {"role": "assistant", "content": "SELECT   * FROM   antismash.ripps ripps   JOIN antismash.protoclusters p ON ripps.protocluster_id = p.protocluster_id   JOIN antismash.regions r ON r.region_id = p.region_id WHERE   ripps.class ILIKE '%thiopeptide%'   AND ripps.subclass ILIKE '%type III%';"}, {"role": "user", "content": "Describe all the CDS located in region 8 of the genome NBC_01571."}, {"role": "assistant", "content": "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;"}, {"role": "user", "content": "What are the genes located in a region_id 1?"}, {"role": "assistant", "content": "SELECT * FROM antismash.cdss WHERE region_id = 1;"}, {"role": "user", "content": "Which PKS regions has trans_at modules? For generating the SQL query, make sure to use antismash. as the prefix before the table name."}]2024-08-15 12:27:37,740 - INFO - HTTP Request: POST http://localhost:11434/api/chat "HTTP/1.1 200 OK"
2024-08-15 12:27:37,741 - ERROR - Failed to process question 34: Which PKS regions has trans_at modules?. Error: cannot unpack non-iterable NoneType object
2024-08-15 12:27:37,741 - INFO - ---DONE---

Info: Ollama Response:
{'model': 'llama3.1:8b', 'created_at': '2024-08-15T12:27:37.739547902Z', 'message': {'role': 'assistant', 'content': 'SELECT DISTINCT antismash.tta_codons.TTA_codon_id\nFROM antismash.tta_codons \nWHERE TTA_codon_id IN ( SELECT tta_codon_id FROM antismash.binding_sites WHERE region_id IN ( SELECT binding_site_id FROM antismash.binding_sites AS T1 INNER JOIN antismash.trans_at AS T2 ON T1.regulator_id = T2.module_id ) );'}, 'done_reason': 'stop', 'done': True, 'total_duration': 1618892828, 'load_duration': 24674694, 'prompt_eval_count': 1026, 'prompt_eval_duration': 406677000, 'eval_count': 86, 'eval_duration': 1068791000}
LLM Response: SELECT DISTINCT antismash.tta_codons.TTA_codon_id
FROM antismash.tta_codons 
WHERE TTA_codon_id IN ( SELECT tta_codon_id FROM antismash.binding_sites WHERE region_id IN ( SELECT binding_site_id FROM antismash.binding_sites AS T1 INNER JOIN antismash.trans_at AS T2 ON T1.regulator_id = T2.module_id ) );
Info: Output from LLM: SELECT DISTINCT antismash.tta_codons.TTA_codon_id
FROM antismash.tta_codons 
WHERE TTA_codon_id IN ( SELECT tta_codon_id FROM antismash.binding_sites WHERE region_id IN ( SELECT binding_site_id FROM antismash.binding_sites AS T1 INNER JOIN antismash.trans_at AS T2 ON T1.regulator_id = T2.module_id ) ); 
Extracted SQL: SELECT DISTINCT antismash.tta_codons.TTA_codon_id
FROM antismash.tta_codons 
WHERE TTA_codon_id IN ( SELECT tta_codon_id FROM antismash.binding_sites WHERE region_id IN ( SELECT binding_site_id FROM antismash.binding_sites AS T1 INNER JOIN antismash.trans_at AS T2 ON T1.regulator_id = T2.module_id ) )
SELECT DISTINCT antismash.tta_codons.TTA_codon_id
FROM antismash.tta_codons 
WHERE TTA_codon_id IN ( SELECT tta_codon_id FROM antismash.binding_sites WHERE region_id IN ( SELECT binding_site_id FROM antismash.binding_sites AS T1 INNER JOIN antismash.trans_at AS T2 ON T1.regulator_id = T2.module_id ) )
Couldn't run sql:  Catalog Error: Table with name trans_at does not exist!
Did you mean "taxa"?
