2024-08-15 15:37:03,389 - INFO - Starting training...
2024-08-15 15:37:03,389 - INFO - Using openai_chat model: gpt-3.5-turbo
2024-08-15 15:37:03,499 - DEBUG - Starting component System
2024-08-15 15:37:03,500 - DEBUG - Starting component Posthog
2024-08-15 15:37:03,500 - DEBUG - Starting component OpenTelemetryClient
2024-08-15 15:37:03,500 - DEBUG - Starting component SimpleAssignmentPolicy
2024-08-15 15:37:03,500 - DEBUG - Starting component SqliteDB
2024-08-15 15:37:03,884 - DEBUG - Starting component QuotaEnforcer
2024-08-15 15:37:03,884 - DEBUG - Starting component LocalSegmentManager
2024-08-15 15:37:03,884 - DEBUG - Starting component SegmentAPI
2024-08-15 15:37:04,007 - DEBUG - load_ssl_context verify=True cert=None trust_env=True http2=False
2024-08-15 15:37:04,008 - DEBUG - load_verify_locations cafile='/usr/lib/ssl/certs/ca-certificates.crt'
2024-08-15 15:37:04,888 - INFO - Training on DDL and documentation files in /datadrive/chatBGC_benchmark/train/antismash...
True
Adding ddl: CREATE SCHEMA antismash;


CREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;
CREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;
CREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;
CREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;
CREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;
CREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;
CREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;
CREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;
CREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;
CREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;
CREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;
CREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;
CREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;

CREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));
CREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);
CREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);
CREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);
CREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), "name" VARCHAR, PRIMARY KEY(algorithm_id));
CREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);
CREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));
CREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );
CREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);
CREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);
CREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);
CREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));
CREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));
CREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));
CREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);
CREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));
CREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));
CREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));
CREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);
CREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));
CREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);
CREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));
CREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));
CREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));
CREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));
CREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));
CREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));
CREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));
CREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));
CREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));
CREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));
CREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));
CREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));
CREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));
CREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));
CREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));
CREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));
CREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));
CREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));
CREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));
CREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));
CREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));
CREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));
CREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));
CREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));
CREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));
CREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));
CREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));
CREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));
CREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));
CREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));
CREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));
CREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));

CREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;
CREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;

CREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);
CREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);
CREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);
CREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);
CREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);
CREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);
CREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);
CREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);
CREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);
CREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);
CREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);
CREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);
2024-08-15 15:37:04,917 - DEBUG - WARNING: No ONNX providers provided, defaulting to available providers: ['AzureExecutionProvider', 'CPUExecutionProvider']
2024-08-15 15:37:05,114 - DEBUG - Starting component PersistentLocalHnswSegment
2024-08-15 15:37:05,157 - INFO - Trained on DDL file: /datadrive/chatBGC_benchmark/train/antismash/schema.sql
2024-08-15 15:37:05,174 - DEBUG - Starting component PersistentLocalHnswSegment
2024-08-15 15:37:05,208 - INFO - Trained on question-sql pair: {'id': 1, 'question': 'List all antiSMASH BGC categories and their descriptions.', 'sql': 'SELECT   * FROM   antismash.bgc_categories;', 'answer': 'There are seven BGC categories, including Polyketide (pks), Nonribosomal peptide (nrps), Ribosomally synthesized and post-translationally modified peptide (ripp), Terpene (terpene), Saccharide (saccharide), Alkaloid (alkaloid) and Other (other)', 'difficulty': 'Easy', 'category': None, 'label': 'Test'}
2024-08-15 15:37:05,243 - INFO - Trained on question-sql pair: {'id': 2, 'question': 'List all pfam domains located in region 8 of the genome NBC_01571.', 'sql': 'SELECT * FROM antismash.pfam_domains WHERE cds_id = 1;', 'answer': 'CDS 1 is associated with pfam domains such as Pfam Domain A and Pfam Domain B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,279 - INFO - Trained on question-sql pair: {'id': 3, 'question': "List all regions with a best MIBiG hit description containing 'neoabyssomicin'.", 'sql': "SELECT * FROM antismash.regions  WHERE best_mibig_hit_description ILIKE '%neoabyssomicin%';", 'answer': "There are 30 regions with a best MIBiG hit description containing 'neoabyssomicin'.", 'difficulty': 'Easy', 'category': None, 'label': 'Test'}
2024-08-15 15:37:05,311 - INFO - Trained on question-sql pair: {'id': 4, 'question': 'List all TTA codons and their locations in a specific sequence.', 'sql': "SELECT * FROM antismash.tta_codons WHERE seq_id = 'SEQ1234';", 'answer': 'Sequence SEQ1234 contains TTA codons at various locations including Location A and Location B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,353 - INFO - Trained on question-sql pair: {'id': 5, 'question': 'What are the available antiSMASH domain subtypes and their descriptions?', 'sql': 'SELECT * FROM antismash.as_domain_subtypes;', 'answer': 'The available antiSMASH domain subtypes are: Condensation_LCL, Trans-AT-KS, Iterative-KS, Condensation_Starter, Condensation_Dual, Hybrid-KS, cMT, Modular-KS, oMT, Polyketide_cyc2, Polyketide_cyc, nMT, Condensation_DCL, Cglyc, AA, Enediyne-KS, lacST, beta-OH, non-elongating-DB, ST, br, alphaMe, alphaMe-eDB, Miscellaneous, beta-D-OMe, non-elongating-beta-OH, DB, alphaMe-DB, beta-Me, beta-D-OH, exomethylene, eDB, keto, beta-OH/keto, red/shDB, beta-L-OH, and beta-OH/eDB. Descriptions are not provided for these subtypes.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,386 - INFO - Trained on question-sql pair: {'id': 6, 'question': 'What are the details of a specific gene identified by its locus tag?', 'sql': "SELECT * FROM antismash.genes WHERE locus_tag = 'LOC1234';", 'answer': 'The gene with locus tag LOC1234 has details including location, region ID, and associated functional classes.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,423 - INFO - Trained on question-sql pair: {'id': 7, 'question': 'What are the details of all regulators and their confidences?', 'sql': 'SELECT * FROM antismash.regulators;', 'answer': 'The database contains regulators such as Regulator A and Regulator B with specific descriptions and confidence levels.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,460 - INFO - Trained on question-sql pair: {'id': 8, 'question': 'What are the different domain profiles available in the antiSMASH database?', 'sql': 'SELECT * FROM antismash.as_domain_profiles;', 'answer': 'The database contains 58 different domain profiles including Beta-eliminating lyase, various Condensation domains, Glycopeptide-specific NRPS domain, Heterocyclization domain, Epimerization domain, multiple Methyl transferase domains, Adenylation domains, Aminotransferase classes, Ketosynthase domain, Ketoreductase domain, Enoylreductase domain, Dehydrogenase domains, Acyltransferase domain, NRPS COM domains, Polyketide cyclase domains, PKS docking domains, Co-enzyme A ligase domain, Acyl-carrier protein domains, Male sterility protein, branching domain, Formylation domain, FkbH-like domain, GNAT domain, Halogenase domain, Pyran synthase domain, Fungal nonreducing product template domain, NRPS domains, and Phosphatidylglycerol lysyltransferase domain.', 'difficulty': 'Easy', 'category': None, 'label': 'Test'}
2024-08-15 15:37:05,495 - INFO - Trained on question-sql pair: {'id': 9, 'question': 'What are the genes located in a region_id 1?', 'sql': 'SELECT * FROM antismash.cdss WHERE region_id = 1;', 'answer': 'Region 1 contains genes such as Gene A and Gene B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,526 - INFO - Trained on question-sql pair: {'id': 10, 'question': 'What are the products of a specific t2pks and their properties?', 'sql': 'SELECT * FROM antismash.t2pks_products WHERE t2pks_id = 1;', 'answer': 'T2PKS 1 produces products such as Product A and Product B with various functions and properties.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,561 - INFO - Trained on question-sql pair: {'id': 11, 'question': 'What binding sites are linked to a specific regulator and their details?', 'sql': 'SELECT * FROM antismash.binding_sites WHERE regulator_id = 1;', 'answer': 'Regulator 1 is linked to binding sites such as Binding Site A and Binding Site B with specific scores and locations.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,611 - INFO - Trained on question-sql pair: {'id': 12, 'question': 'What kind of functional classes are in the antiSMASH database?', 'sql': 'SELECT * FROM antismash.functional_classes;', 'answer': "There are six functional classes, where the functional class Biosynthetic_smcog and Bgc_seed having parent-child relationships with 'biosynthetic' functional class.", 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,646 - INFO - Trained on question-sql pair: {'id': 13, 'question': 'What profiles hit a specific CDS and what are their details?', 'sql': 'SELECT * FROM antismash.profile_hits WHERE cds_id = 1;', 'answer': 'CDS 1 is hit by profiles including Profile A and Profile B with specific evalues and bit scores.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,676 - INFO - Trained on question-sql pair: {'id': 14, 'question': 'What tigrfam domains are related to a specific CDS?', 'sql': 'SELECT * FROM antismash.tigrfam_domains WHERE cds_id = 1;', 'answer': 'CDS 1 is related to tigrfam domains including Tigrfam Domain A and Tigrfam Domain B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,715 - INFO - Trained on question-sql pair: {'id': 15, 'question': 'Which CDSs are located in a specific region and what are their details?', 'sql': 'SELECT * FROM antismash.cdss WHERE region_id = 1;', 'answer': 'Region 1 contains CDSs such as CDS A and CDS B with specific locus tags and product information.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,746 - INFO - Trained on question-sql pair: {'id': 16, 'question': 'Which comparippson hits are associated with a specific MIBIG reference?', 'sql': 'SELECT * FROM antismash.comparippson_hits WHERE comparippson_mibig_id = 1;', 'answer': 'MIBIG Reference 1 is associated with comparippson hits such as Hit A and Hit B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,785 - INFO - Trained on question-sql pair: {'id': 17, 'question': 'Which domains are linked to a particular substrate?', 'sql': 'SELECT * FROM antismash.rel_as_domains_substrates WHERE substrate_id = 1;', 'answer': 'Substrate 1 is linked to multiple domains, including Domain A and Domain B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,816 - INFO - Trained on question-sql pair: {'id': 18, 'question': 'What are antiSMASH candidate types and their descriptions?', 'sql': 'SELECT candidate_type_id, description FROM antismash.candidate_types;', 'answer': 'AntiSMASH candidate types can be a Chemical hybrid, Interleaved, Neighbouring, or Single.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,849 - INFO - Trained on question-sql pair: {'id': 19, 'question': 'What are the candidates identified in a specific region and their details?', 'sql': 'SELECT * FROM antismash.candidates WHERE region_id = 1;', 'answer': 'Region 1 has candidates such as Candidate A and Candidate B with specific locations and types.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,882 - INFO - Trained on question-sql pair: {'id': 20, 'question': 'Which SMCOGs are associated with a specific functional class?', 'sql': 'SELECT * FROM antismash.smcogs WHERE functional_class_id = 1;', 'answer': 'Functional Class 1 is associated with SMCOGs such as SMCOG A and SMCOG B.', 'difficulty': 'Easy', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,915 - INFO - Trained on question-sql pair: {'id': 21, 'question': 'How many Streptomyces genomes are in the dataset?', 'sql': "SELECT   COUNT(*) FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id WHERE   t.genus = 'Streptomyces';", 'answer': 'There are 880 Streptomyces genomes in the dataset.', 'difficulty': 'Medium', 'category': None, 'label': 'Training'}
2024-08-15 15:37:05,964 - INFO - Trained on question-sql pair: {'id': 22, 'question': 'Summarize the genus distribution in the antiSMASH dataset.', 'sql': 'SELECT   t.genus,   COUNT(*) as genus_count FROM   antismash.genomes g   JOIN antismash.taxa t ON g.tax_id = t.tax_id GROUP BY t.genus;', 'answer': None, 'difficulty': 'Medium', 'category': None, 'label': 'Test'}
2024-08-15 15:37:05,996 - INFO - Trained on question-sql pair: {'id': 23, 'question': 'Summarize all taxa of the genomes and their details.', 'sql': 'SELECT t.* FROM antismash.taxa t JOIN antismash.genomes g ON t.tax_id = g.tax_id;', 'answer': "The data contains 1032 entries of bacterial genomes, all classified under the superkingdom 'Bacteri' and the phylum 'Actinomycetota' with the majority being unclassified at the kingdom level. The data spans multiple orders within the class 'Actinomycetes' primarily 'Kitasatosporales' and 'Micromonosporales'. The family 'Streptomycetaceae' and genus 'Streptomyces' are most frequent, with many species and strains listed as unclassified. Other notable genera include 'Micromonospora', 'Nocardia', 'Kitasatospora', and 'Amycolatopsis'. The species 'albidoflavus', 'virginiae', 'microflavus', and 'jietaisiensis' frequently appear.", 'difficulty': 'Medium', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,030 - INFO - Trained on question-sql pair: {'id': 24, 'question': 'Which genome has the longest DNA sequence?', 'sql': 'SELECT g.*, LENGTH(d.dna) as dna_length FROM antismash.genomes g JOIN antismash.dna_sequences d ON g.genome_id = d.genome_id ORDER BY LENGTH(d.dna) DESC LIMIT 1;', 'answer': 'Genome NBC_01737 has the longest DNA sequence with a length of 13942900 base pairs.', 'difficulty': 'Medium', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,065 - INFO - Trained on question-sql pair: {'id': 25, 'question': 'Which regions has iterative modules?', 'sql': 'SELECT r.*, m.* FROM antismash.regions r JOIN antismash.modules m ON r.region_id = m.region_id WHERE m.iterative = TRUE;', 'answer': 'Module 1 is associated with candidates such as Candidate 1 and Candidate 2.', 'difficulty': 'Medium', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,107 - INFO - Trained on question-sql pair: {'id': 26, 'question': 'Describe all the CDS located in region 8 of the genome NBC_01571.', 'sql': "SELECT   cds.*,   r.*,   g.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id WHERE   g.assembly_id = 'NBC_01571'   AND r.region_number = 8;", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,142 - INFO - Trained on question-sql pair: {'id': 27, 'question': 'Find all lanthipeptide BGC type regions.', 'sql': "SELECT   r.*,   bt.* FROM   antismash.rel_regions_types rrt   JOIN antismash.bgc_types bt ON rrt.bgc_type_id = bt.bgc_type_id   JOIN antismash.regions r ON rrt.region_id = r.region_id WHERE   bt.description ILIKE '%lanthipeptide%';", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,177 - INFO - Trained on question-sql pair: {'id': 28, 'question': 'Find all NRPS regions with both glycosyltransferase halogenase SMCOGs ', 'sql': "SELECT   g.assembly_id,   r.accession,   r.region_number,   smcogs.*,   smcog_hits.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.smcog_hits smcog_hits ON cds.cds_id = smcog_hits.cds_id   JOIN antismash.smcogs smcogs ON smcog_hits.smcog_id = smcogs.smcog_id WHERE   smcogs.description ILIKE '%glycosyl%'   OR smcogs.description ILIKE '%halogenase%';", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,216 - INFO - Trained on question-sql pair: {'id': 29, 'question': 'Get me all RIPPs precursor peptide for thiopeptide type II', 'sql': "SELECT   * FROM   antismash.ripps ripps   JOIN antismash.protoclusters p ON ripps.protocluster_id = p.protocluster_id   JOIN antismash.regions r ON r.region_id = p.region_id WHERE   ripps.class ILIKE '%thiopeptide%'   AND ripps.subclass ILIKE '%type III%';", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,289 - INFO - Trained on question-sql pair: {'id': 30, 'question': "Get me all genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'.", 'sql': "SELECT   g.*,   r.*,   ad.*,   radts.subtype FROM   antismash.regions r   JOIN antismash.cdss cdss ON cdss.region_id = r.region_id   JOIN antismash.as_domains ad ON cdss.cds_id = ad.cds_id   JOIN antismash.rel_as_domain_to_subtype radts ON ad.as_domain_id = radts.as_domain_id   JOIN antismash.dna_sequences ds ON r.accession = ds.accession   JOIN antismash.genomes g ON ds.genome_id = g.genome_id WHERE   radts.subtype = 'Trans-AT-KS';", 'answer': "The data consists of 75 entries from various genomes and regions containing domains where the domain subtype is 'Trans-AT-KS'. Key details include:", 'difficulty': 'Hard', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,333 - INFO - Trained on question-sql pair: {'id': 31, 'question': 'Get me all PKS regions which utilizes methylmalonyl-CoA as a substrate', 'sql': "SELECT   g.assembly_id,   r.accession,   r.region_number,   as_domains.*,   cds.* FROM   antismash.regions r   JOIN antismash.dna_sequences d ON r.accession = d.accession   JOIN antismash.genomes g ON d.genome_id = g.genome_id   JOIN antismash.cdss cds ON r.region_id = cds.region_id   JOIN antismash.as_domains as_domains ON cds.cds_id = as_domains.cds_id WHERE   as_domains.pks_signature ILIKE '%methylmalonyl-CoA%';", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,374 - INFO - Trained on question-sql pair: {'id': 32, 'question': 'Get me all region with knownclusterblast hits above 80 percent similarity.', 'sql': 'SELECT best_mibig_hit_description, COUNT(*) as occurrence_count FROM antismash.regions WHERE best_mibig_hit_similarity > 80 GROUP BY best_mibig_hit_description ORDER BY occurrence_count DESC;', 'answer': 'Region 1 has cluster blast hits including Hit A and Hit B with specific descriptions and similarities.', 'difficulty': 'Hard', 'category': None, 'label': 'Training'}
2024-08-15 15:37:06,407 - INFO - Trained on question-sql pair: {'id': 33, 'question': 'List all PKS regions in genome NBC_01737.', 'sql': "SELECT r.*, bt.*, g.*, rt.*  FROM antismash.regions r  JOIN antismash.dna_sequences d  ON r.accession = d.accession  JOIN antismash.genomes g ON d.genome_id = g.genome_id  JOIN antismash.rel_regions_types rt ON r.region_id = rt.region_id  JOIN antismash.bgc_types bt ON rt.bgc_type_id = bt.bgc_type_id  WHERE g.assembly_id = 'NBC_01737'  AND bt.term ILIKE '%PKS%';", 'answer': 'The genome NBC_01737 contains 5 PKS regions with the following details:\n1. Region 1: Location [1505416:1546433], best hit loseolamycin A1/loseolamycin A2 with 68% similarity.\n2. Region 5: Location [5772447:5884359], best hit neoabyssomicin/abyssomicin with 28% similarity.\n3. Region 11: Location [8202310:8321183], best hit diazepinomicin with 75% similarity.\n4. Region 20: Location [11551477:11627322], best hit azinomycin B with 68% similarity.\n5. Region 21: Location [12318862:12465542], best hit BE-43547A1/A2/B1/B2/B3/C1/C2 with 30% similarity.', 'difficulty': 'Hard', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,446 - INFO - Trained on question-sql pair: {'id': 34, 'question': 'Which PKS regions has trans_at modules?', 'sql': "SELECT r.*, m.*, bgc.*  FROM antismash.regions r  JOIN antismash.modules m ON r.region_id=m.region_id JOIN antismash.rel_regions_types rt ON r.region_id=rt.region_id  JOIN antismash.bgc_types bgc ON rt.bgc_type_id=bgc.bgc_type_id  WHERE bgc.term ILIKE '%PKS%'  AND m.trans_at = true;", 'answer': None, 'difficulty': 'Hard', 'category': None, 'label': 'Test'}
2024-08-15 15:37:06,470 - DEBUG - Starting component PersistentLocalHnswSegment
2024-08-15 15:37:06,512 - INFO - Trained on documentation file: /datadrive/chatBGC_benchmark/train/antismash/antismash_docs.md
2024-08-15 15:37:06,587 - INFO - Trained on documentation file: /datadrive/chatBGC_benchmark/train/antismash/antismash_glossary.md
2024-08-15 15:37:06,650 - INFO - Trained on documentation file: /datadrive/chatBGC_benchmark/train/antismash/antismash_tables.md
2024-08-15 15:37:10,013 - INFO - Training completed.

Adding documentation....
Adding documentation....
Adding documentation....
