CREATE SCHEMA antismash;


CREATE SEQUENCE antismash.antismash_as_domains_as_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_as_domain_profiles_as_domain_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 59 NO CYCLE;
CREATE SEQUENCE antismash.antismash_bgc_rules_bgc_rule_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_bgc_types_bgc_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 86 NO CYCLE;
CREATE SEQUENCE antismash.antismash_binding_sites_binding_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_candidates_candidate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_candidate_types_candidate_type_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 5 NO CYCLE;
CREATE SEQUENCE antismash.antismash_cdss_cds_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_clusterblast_algorithms_algorithm_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;
CREATE SEQUENCE antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_cluster_compare_hits_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_hits_comparippson_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_functional_classes_functional_class_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;
CREATE SEQUENCE antismash.antismash_genes_gene_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_gene_ontologies_go_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 2636 NO CYCLE;
CREATE SEQUENCE antismash.antismash_genomes_genome_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_isolates_isolate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_modules_module_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_module_domain_functions_function_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 7 NO CYCLE;
CREATE SEQUENCE antismash.antismash_monomers_monomer_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 154 NO CYCLE;
CREATE SEQUENCE antismash.antismash_pfam_domains_pfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_profile_hits_profile_hit_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_protoclusters_protocluster_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regions_region_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regulators_regulator_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 18 NO CYCLE;
CREATE SEQUENCE antismash.antismash_regulator_confidence_confidence_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 4 NO CYCLE;
CREATE SEQUENCE antismash.antismash_resfams_resfam_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 124 NO CYCLE;
CREATE SEQUENCE antismash.antismash_resfam_domains_resfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_samples_sample_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_sampling_sites_site_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_smcogs_smcog_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 302 NO CYCLE;
CREATE SEQUENCE antismash.antismash_substrates_substrate_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 280 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_cds_domain_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_profiles_profile_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 41 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_starters_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_starter_elongation_combo_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_t2pks_t2pks_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_taxa_tax_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 37945 NO CYCLE;
CREATE SEQUENCE antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;
CREATE SEQUENCE antismash.antismash_tta_codons_tta_codon_id_seq INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 NO CYCLE;

CREATE TABLE antismash.as_domain_profiles(as_domain_profile_id INTEGER DEFAULT(nextval('antismash.antismash_as_domain_profiles_as_domain_profile_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, "DATABASE" VARCHAR NOT NULL, "TYPE" VARCHAR, PRIMARY KEY(as_domain_profile_id));
CREATE TABLE antismash.as_domain_subtypes(subtype VARCHAR PRIMARY KEY, description VARCHAR);
CREATE TABLE antismash.bgc_categories(category VARCHAR PRIMARY KEY, description VARCHAR NOT NULL UNIQUE);
CREATE TABLE antismash.candidate_types(candidate_type_id INTEGER DEFAULT(nextval('antismash.antismash_candidate_types_candidate_type_id_seq')) PRIMARY KEY, description VARCHAR NOT NULL);
CREATE TABLE antismash.clusterblast_algorithms(algorithm_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_algorithms_algorithm_id_seq')), "name" VARCHAR, PRIMARY KEY(algorithm_id));
CREATE TABLE antismash.comparippson_mibig_references(comparippson_mibig_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_mibig_references_comparippson_mibig_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, product VARCHAR NOT NULL, compound VARCHAR NOT NULL);
CREATE TABLE antismash.filenames(assembly_id VARCHAR, base_filename VARCHAR, PRIMARY KEY(assembly_id));
CREATE TABLE antismash.functional_classes(functional_class_id INTEGER DEFAULT(nextval('antismash.antismash_functional_classes_functional_class_id_seq')), "name" VARCHAR, parent_id INTEGER, PRIMARY KEY(functional_class_id), );
CREATE TABLE antismash.gene_ontologies(go_id INTEGER DEFAULT(nextval('antismash.antismash_gene_ontologies_go_id_seq')) PRIMARY KEY, identifier VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);
CREATE TABLE antismash.module_domain_functions(function_id INTEGER DEFAULT(nextval('antismash.antismash_module_domain_functions_function_id_seq')) PRIMARY KEY, "FUNCTION" VARCHAR NOT NULL);
CREATE TABLE antismash.pfams(pfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE, "VERSION" INTEGER);
CREATE TABLE antismash.profiles("name" VARCHAR, description VARCHAR, cutoff INTEGER, filename VARCHAR, PRIMARY KEY("name"));
CREATE TABLE antismash.regulators(regulator_id INTEGER DEFAULT(nextval('antismash.antismash_regulators_regulator_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, PRIMARY KEY(regulator_id), UNIQUE("name"));
CREATE TABLE antismash.regulator_confidence(confidence_id INTEGER DEFAULT(nextval('antismash.antismash_regulator_confidence_confidence_id_seq')) PRIMARY KEY, "name" VARCHAR NOT NULL, strength SMALLINT NOT NULL, UNIQUE("name"));
CREATE TABLE antismash.resfams(resfam_id INTEGER DEFAULT(nextval('antismash.antismash_resfams_resfam_id_seq')) PRIMARY KEY, accession VARCHAR NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL);
CREATE TABLE antismash.sampling_sites(site_id INTEGER DEFAULT(nextval('antismash.antismash_sampling_sites_site_id_seq')), PRIMARY KEY(site_id));
CREATE TABLE antismash.substrates(substrate_id INTEGER DEFAULT(nextval('antismash.antismash_substrates_substrate_id_seq')), "name" VARCHAR, description VARCHAR, PRIMARY KEY(substrate_id), UNIQUE("name"));
CREATE TABLE antismash.t2pks_products(product_type VARCHAR, product_function VARCHAR, PRIMARY KEY(product_type));
CREATE TABLE antismash.t2pks_profiles(profile_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_profiles_profile_id_seq')) PRIMARY KEY, "name" VARCHAR NOT NULL UNIQUE, description VARCHAR NOT NULL);
CREATE TABLE antismash.taxa(tax_id INTEGER DEFAULT(nextval('antismash.antismash_taxa_tax_id_seq')), ncbi_taxid INTEGER, superkingdom VARCHAR, kingdom VARCHAR, phylum VARCHAR, "CLASS" VARCHAR, taxonomic_order VARCHAR, "family" VARCHAR, genus VARCHAR, species VARCHAR, strain VARCHAR, "name" VARCHAR NOT NULL, PRIMARY KEY(tax_id), UNIQUE("name"));
CREATE TABLE antismash.tigrfams(tigrfam_id VARCHAR PRIMARY KEY, "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, trusted_cutoff DOUBLE);
CREATE TABLE antismash.bgc_types(bgc_type_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_types_bgc_type_id_seq')), term VARCHAR NOT NULL, description VARCHAR NOT NULL, category VARCHAR NOT NULL, PRIMARY KEY(bgc_type_id), UNIQUE(term), FOREIGN KEY (category) REFERENCES antismash.bgc_categories(category));
CREATE TABLE antismash.monomers(monomer_id INTEGER DEFAULT(nextval('antismash.antismash_monomers_monomer_id_seq')) PRIMARY KEY, substrate_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, description VARCHAR, FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id), UNIQUE("name"));
CREATE TABLE antismash.rel_as_domain_to_subtype(as_domain_id INTEGER, subtype VARCHAR, FOREIGN KEY (subtype) REFERENCES antismash.as_domain_subtypes(subtype), PRIMARY KEY(as_domain_id, subtype));
CREATE TABLE antismash.samples(sample_id INTEGER DEFAULT(nextval('antismash.antismash_samples_sample_id_seq')), habitat VARCHAR, "TIME" VARCHAR, site_id INTEGER, PRIMARY KEY(sample_id), FOREIGN KEY (site_id) REFERENCES antismash.sampling_sites(site_id));
CREATE TABLE antismash.smcogs(smcog_id INTEGER DEFAULT(nextval('antismash.antismash_smcogs_smcog_id_seq')), "name" VARCHAR NOT NULL, description VARCHAR NOT NULL, functional_class_id INTEGER, PRIMARY KEY(smcog_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));
CREATE TABLE antismash.bgc_rules(bgc_rule_id INTEGER DEFAULT(nextval('antismash.antismash_bgc_rules_bgc_rule_id_seq')), "RULE" VARCHAR, bgc_type_id INTEGER, PRIMARY KEY(bgc_rule_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.isolates(isolate_id INTEGER DEFAULT(nextval('antismash.antismash_isolates_isolate_id_seq')), sample_id INTEGER, PRIMARY KEY(isolate_id), FOREIGN KEY (sample_id) REFERENCES antismash.samples(sample_id));
CREATE TABLE antismash.genomes(genome_id INTEGER DEFAULT(nextval('antismash.antismash_genomes_genome_id_seq')), tax_id INTEGER NOT NULL, bio_project VARCHAR, bio_sample VARCHAR, isolate_id INTEGER, assembly_id VARCHAR NOT NULL, PRIMARY KEY(genome_id), FOREIGN KEY (tax_id) REFERENCES antismash.taxa(tax_id), FOREIGN KEY (isolate_id) REFERENCES antismash.isolates(isolate_id));
CREATE TABLE antismash.dna_sequences(dna VARCHAR, md5 VARCHAR, accession VARCHAR PRIMARY KEY, definition VARCHAR, contig_type INTEGER, chromosome_type INTEGER, record_number INTEGER NOT NULL, "VERSION" INTEGER, genome_id INTEGER, FOREIGN KEY (genome_id) REFERENCES antismash.genomes(genome_id));
CREATE TABLE antismash.regions(region_id INTEGER DEFAULT(nextval('antismash.antismash_regions_region_id_seq')), accession VARCHAR NOT NULL, region_number INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, start_pos INTEGER NOT NULL, end_pos INTEGER NOT NULL, contig_edge BOOLEAN NOT NULL, best_mibig_hit_acc VARCHAR, best_mibig_hit_description VARCHAR, best_mibig_hit_similarity INTEGER, FOREIGN KEY (accession) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(region_id));
CREATE TABLE antismash.rel_regions_types(region_id INTEGER, bgc_type_id INTEGER, PRIMARY KEY(region_id, bgc_type_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.tta_codons(tta_codon_id INTEGER DEFAULT(nextval('antismash.antismash_tta_codons_tta_codon_id_seq')), seq_id VARCHAR NOT NULL, "LOCATION" VARCHAR NOT NULL, FOREIGN KEY (seq_id) REFERENCES antismash.dna_sequences(accession), PRIMARY KEY(tta_codon_id));
CREATE TABLE antismash.binding_sites(binding_site_id INTEGER DEFAULT(nextval('antismash.antismash_binding_sites_binding_site_id_seq')) PRIMARY KEY, regulator_id INTEGER NOT NULL, region_id INTEGER NOT NULL, score FLOAT NOT NULL, "START" INTEGER NOT NULL, confidence_id INTEGER NOT NULL, FOREIGN KEY (regulator_id) REFERENCES antismash.regulators(regulator_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (confidence_id) REFERENCES antismash.regulator_confidence(confidence_id));
CREATE TABLE antismash.candidates(candidate_id INTEGER DEFAULT(nextval('antismash.antismash_candidates_candidate_id_seq')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, candidate_type_id INTEGER NOT NULL, smiles VARCHAR, polymer VARCHAR, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (candidate_type_id) REFERENCES antismash.candidate_types(candidate_type_id), PRIMARY KEY(candidate_id));
CREATE TABLE antismash.cdss(cds_id INTEGER DEFAULT(nextval('antismash.antismash_cdss_cds_id_seq')), functional_class_id INTEGER, locus_tag VARCHAR, "name" VARCHAR, product VARCHAR, protein_id VARCHAR, TRANSLATION VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(cds_id), FOREIGN KEY (functional_class_id) REFERENCES antismash.functional_classes(functional_class_id));
CREATE TABLE antismash.clusterblast_hits(clusterblast_hit_id INTEGER DEFAULT(nextval('antismash.antismash_clusterblast_hits_clusterblast_hit_id_seq')) PRIMARY KEY, region_id INTEGER NOT NULL, rank INTEGER NOT NULL, acc VARCHAR NOT NULL, description VARCHAR NOT NULL, similarity INTEGER NOT NULL, algorithm_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (algorithm_id) REFERENCES antismash.clusterblast_algorithms(algorithm_id));
CREATE TABLE antismash.comparippson_asdb_references(comparippson_asdb_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_asdb_references_comparippson_asdb_id_seq')) PRIMARY KEY, cds_id INTEGER NOT NULL, product VARCHAR NOT NULL, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.comparippson_hits(comparippson_hit_id INTEGER DEFAULT(nextval('antismash.antismash_comparippson_hits_comparippson_hit_id_seq')) PRIMARY KEY, cds_id INTEGER, similarity FLOAT NOT NULL, region_id INTEGER, comparippson_mibig_id INTEGER, comparippson_asdb_id INTEGER, FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (comparippson_mibig_id) REFERENCES antismash.comparippson_mibig_references(comparippson_mibig_id), FOREIGN KEY (comparippson_asdb_id) REFERENCES antismash.comparippson_asdb_references(comparippson_asdb_id), CHECK(((CAST((comparippson_asdb_id IS NOT NULL) AS INTEGER) + CAST((comparippson_mibig_id IS NOT NULL) AS INTEGER)) = 1)));
CREATE TABLE antismash.genes(gene_id INTEGER DEFAULT(nextval('antismash.antismash_genes_gene_id_seq')), locus_tag VARCHAR, "LOCATION" VARCHAR NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(gene_id));
CREATE TABLE antismash.modules(module_id INTEGER DEFAULT(nextval('antismash.antismash_modules_module_id_seq')), "LOCATION" VARCHAR NOT NULL, "TYPE" VARCHAR NOT NULL, trans_at BOOLEAN NOT NULL, complete BOOLEAN NOT NULL, iterative BOOLEAN NOT NULL, multi_gene BOOLEAN NOT NULL, region_id INTEGER, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(module_id));
CREATE TABLE antismash.pfam_domains(pfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_pfam_domains_pfam_domain_id_seq')), "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, PRIMARY KEY(pfam_domain_id), FOREIGN KEY (pfam_id) REFERENCES antismash.pfams(pfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.pfam_go_entries(pfam_domain_id INTEGER, go_id INTEGER, FOREIGN KEY (pfam_domain_id) REFERENCES antismash.pfam_domains(pfam_domain_id), FOREIGN KEY (go_id) REFERENCES antismash.gene_ontologies(go_id), PRIMARY KEY(pfam_domain_id, go_id));
CREATE TABLE antismash.profile_hits(profile_hit_id INTEGER DEFAULT(nextval('antismash.antismash_profile_hits_profile_hit_id_seq')), cds_id INTEGER, "name" VARCHAR, evalue DOUBLE, bitscore DOUBLE, seeds INTEGER, PRIMARY KEY(profile_hit_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY ("name") REFERENCES antismash.profiles("name"));
CREATE TABLE antismash.protoclusters(protocluster_id INTEGER DEFAULT(nextval('antismash.antismash_protoclusters_protocluster_id_seq')), region_id INTEGER NOT NULL, "LOCATION" VARCHAR NOT NULL, bgc_type_id INTEGER NOT NULL, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), PRIMARY KEY(protocluster_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id));
CREATE TABLE antismash.rel_candidates_modules(candidate_id INTEGER, module_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), PRIMARY KEY(candidate_id, module_id));
CREATE TABLE antismash.rel_candidates_protoclusters(candidate_id INTEGER, protocluster_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(candidate_id, protocluster_id));
CREATE TABLE antismash.rel_candidates_types(candidate_id INTEGER, bgc_type_id INTEGER, FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (bgc_type_id) REFERENCES antismash.bgc_types(bgc_type_id), PRIMARY KEY(candidate_id, bgc_type_id));
CREATE TABLE antismash.rel_cds_candidates(candidate_id INTEGER, cds_id INTEGER, PRIMARY KEY(candidate_id, cds_id), FOREIGN KEY (candidate_id) REFERENCES antismash.candidates(candidate_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.rel_cds_protoclusters(protocluster_id INTEGER, cds_id INTEGER, PRIMARY KEY(protocluster_id, cds_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.rel_modules_monomers(module_id INTEGER, substrate INTEGER, monomer INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (substrate) REFERENCES antismash.substrates(substrate_id), FOREIGN KEY (monomer) REFERENCES antismash.monomers(monomer_id), PRIMARY KEY(module_id, substrate, monomer));
CREATE TABLE antismash.resfam_domains(resfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_resfam_domains_resfam_domain_id_seq')) PRIMARY KEY, score DOUBLE, evalue DOUBLE, resfam_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, FOREIGN KEY (resfam_id) REFERENCES antismash.resfams(resfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.ripps(protocluster_id INTEGER, peptide_sequence VARCHAR, molecular_weight FLOAT, monoisotopic_mass FLOAT, alternative_weights VARCHAR, bridges INTEGER, "CLASS" VARCHAR, subclass VARCHAR, score DOUBLE, locus_tag VARCHAR, cds_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), PRIMARY KEY(protocluster_id, locus_tag));
CREATE TABLE antismash.smcog_hits(smcog_id INTEGER, cds_id INTEGER, score DOUBLE, evalue DOUBLE, image_path VARCHAR, PRIMARY KEY(smcog_id, cds_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (smcog_id) REFERENCES antismash.smcogs(smcog_id));
CREATE TABLE antismash.t2pks(t2pks_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_t2pks_id_seq')), protocluster_id INTEGER NOT NULL, FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), PRIMARY KEY(t2pks_id));
CREATE TABLE antismash.t2pks_cds_domain(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_cds_domain_domain_id_seq')), t2pks_id INTEGER NOT NULL, cds_id INTEGER NOT NULL, profile_id INTEGER NOT NULL, protein_type VARCHAR NOT NULL, protein_function VARCHAR, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id), FOREIGN KEY (profile_id) REFERENCES antismash.t2pks_profiles(profile_id), PRIMARY KEY(domain_id));
CREATE TABLE antismash.t2pks_product_classes(t2pks_id INTEGER, product_class VARCHAR, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(t2pks_id, product_class));
CREATE TABLE antismash.t2pks_starters(domain_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starters_domain_id_seq')), t2pks_id INTEGER NOT NULL, "name" VARCHAR NOT NULL, evalue DOUBLE NOT NULL, bitscore DOUBLE NOT NULL, FOREIGN KEY (t2pks_id) REFERENCES antismash.t2pks(t2pks_id), PRIMARY KEY(domain_id));
CREATE TABLE antismash.t2pks_starter_elongation(combo_id INTEGER DEFAULT(nextval('antismash.antismash_t2pks_starter_elongation_combo_id_seq')), domain_id INTEGER NOT NULL, elongation INTEGER NOT NULL, weight FLOAT NOT NULL, FOREIGN KEY (domain_id) REFERENCES antismash.t2pks_starters(domain_id), PRIMARY KEY(combo_id));
CREATE TABLE antismash.tigrfam_domains(tigrfam_domain_id INTEGER DEFAULT(nextval('antismash.antismash_tigrfam_domains_tigrfam_domain_id_seq')) PRIMARY KEY, "DATABASE" VARCHAR, detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, tigrfam_id VARCHAR, "LOCATION" VARCHAR, cds_id INTEGER, FOREIGN KEY (tigrfam_id) REFERENCES antismash.tigrfams(tigrfam_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.as_domains(as_domain_id INTEGER DEFAULT(nextval('antismash.antismash_as_domains_as_domain_id_seq')), detection VARCHAR, score DOUBLE, evalue DOUBLE, TRANSLATION VARCHAR, pks_signature VARCHAR, minowa VARCHAR, nrps_predictor VARCHAR, stachelhaus VARCHAR, consensus VARCHAR, kr_activity BOOLEAN, kr_stereochemistry VARCHAR, as_domain_profile_id INTEGER, "LOCATION" VARCHAR NOT NULL, cds_id INTEGER, module_id INTEGER, function_id INTEGER, follows INTEGER, FOREIGN KEY (module_id) REFERENCES antismash.modules(module_id), FOREIGN KEY (function_id) REFERENCES antismash.module_domain_functions(function_id), PRIMARY KEY(as_domain_id), FOREIGN KEY (as_domain_profile_id) REFERENCES antismash.as_domain_profiles(as_domain_profile_id), FOREIGN KEY (cds_id) REFERENCES antismash.cdss(cds_id));
CREATE TABLE antismash.cluster_compare_hits(hit_id INTEGER DEFAULT(nextval('antismash.antismash_cluster_compare_hits_hit_id_seq')) PRIMARY KEY, region_id INTEGER, protocluster_id INTEGER, reference_accession VARCHAR NOT NULL, description VARCHAR, score FLOAT NOT NULL, identity_metric FLOAT NOT NULL, order_metric FLOAT, components_metric FLOAT, FOREIGN KEY (region_id) REFERENCES antismash.regions(region_id), FOREIGN KEY (protocluster_id) REFERENCES antismash.protoclusters(protocluster_id), CHECK(((CAST((region_id IS NOT NULL) AS INTEGER) + CAST((protocluster_id IS NOT NULL) AS INTEGER)) = 1)));
CREATE TABLE antismash.rel_as_domains_substrates(as_domain_id INTEGER, substrate_id INTEGER, position_in_domain INTEGER, PRIMARY KEY(as_domain_id, substrate_id), FOREIGN KEY (as_domain_id) REFERENCES antismash.as_domains(as_domain_id), FOREIGN KEY (substrate_id) REFERENCES antismash.substrates(substrate_id));

CREATE VIEW antismash.sequence_gc_content AS SELECT accession, round(((100.0 * (((length(dna) - length(replace(dna, 'G', ''))) + length(dna)) - length(replace(dna, 'C', '')))) / length(dna)), 2) AS gc_content FROM antismash.dna_sequences;
CREATE VIEW antismash.sequence_lengths AS SELECT accession, length(dna) AS seq_length FROM antismash.dna_sequences;

CREATE INDEX as_domains_cds_id_idx ON antismash.as_domains(cds_id);
CREATE INDEX as_domains_follows_idx ON antismash.as_domains(follows);
CREATE INDEX cdss_locus_tag_idx ON antismash.cdss(locus_tag);
CREATE INDEX cluster_compare_ref_idx ON antismash.cluster_compare_hits(reference_accession);
CREATE INDEX genes_locus_tag_idx ON antismash.genes(locus_tag);
CREATE INDEX pfam_domains_cds_id_idx ON antismash.pfam_domains(cds_id);
CREATE INDEX profile_hits_cds_id_idx ON antismash.profile_hits(cds_id);
CREATE INDEX resfam_domains_cds_id_idx ON antismash.resfam_domains(cds_id);
CREATE INDEX ripps_locus_tag_idx ON antismash.ripps(locus_tag);
CREATE INDEX ripps_peptides_sequence_idx ON antismash.ripps(peptide_sequence);
CREATE INDEX smcog_hits_cds_id_idx ON antismash.smcog_hits(cds_id);
CREATE INDEX tigrfam_domains_cds_id_idx ON antismash.tigrfam_domains(cds_id);
